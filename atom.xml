<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沪江移动开发</title>
  <subtitle>学习，成为更好的自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-06T11:18:34.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>沪江移动开发</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS技术周刊第2期</title>
    <link href="http://yoursite.com/2016/03/06/ios-technology-magazine-2/"/>
    <id>http://yoursite.com/2016/03/06/ios-technology-magazine-2/</id>
    <published>2016-03-05T16:00:00.000Z</published>
    <updated>2016-03-06T11:18:34.000Z</updated>
    
    <content type="html">&lt;p&gt;本周重点在性能优化和Hybrid方面，包含&lt;code&gt;AsyncDisplayKit&lt;/code&gt;的实践，RN相关等，另外App开发人员也应该了解一些API设计，本期重点介绍API建模工具RAML，希望大家能够有所收获。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;沪江原创&quot;&gt;&lt;a href=&quot;#沪江原创&quot; class=&quot;headerlink&quot; title=&quot;沪江原创&quot;&gt;&lt;/a&gt;沪江原创&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hujiangtechnology.github.io/2016/03/05/asyncdisplaykit-practice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深度实践 AsyncDisplayKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;用RAML来构建API文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hybrid&quot;&gt;&lt;a href=&quot;#Hybrid&quot; class=&quot;headerlink&quot; title=&quot;Hybrid&quot;&gt;&lt;/a&gt;Hybrid&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150811/12985.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIWebView与JS的深度交互&lt;/a&gt;，禁用获取的HTML文本中自带的 &amp;lt; img &amp;gt; 标签自动加载，并把下载图片的操作放在native端来处理，提高响应速度并且节省用户流量，同时也能在本地对图片各种操作，一个不错的交互实践。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPatch 实现原理详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ele828/react-native-guide#%E5%B7%A5%E5%85%B7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React-Native各类学习资源&lt;/a&gt;，资料很全面，包含开源app，以及一些工具和组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能优化&quot;&gt;&lt;a href=&quot;#性能优化&quot; class=&quot;headerlink&quot; title=&quot;性能优化&quot;&gt;&lt;/a&gt;性能优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/#more-41893&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 保持界面流畅的技巧&lt;/a&gt;，很详细的分析了界面卡顿的原因，以及对应的解决方法的研究方向（&lt;em&gt;异步绘制&lt;/em&gt;，&lt;em&gt;预排版&lt;/em&gt;，&lt;em&gt;预渲染&lt;/em&gt;，&lt;em&gt;全局并发控制&lt;/em&gt;）和实践，相当不错哦，值得你拥有。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;amp;mid=447105405&amp;amp;idx=1&amp;amp;sn=054dc54289a98e8a39f2b9386f4f620e&amp;amp;scene=23&amp;amp;srcid=0108RhyzhXk9wUwQvnW3cmZT#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内存恶鬼drawRect - 谈画图功能的内存优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/cc756016243b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS的TCP/IP协议族剖析&amp;amp;&amp;amp;Socket&lt;/a&gt;，主要介绍了TCP/IP的工作原理以及Socket的原理和实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;绘图&quot;&gt;&lt;a href=&quot;#绘图&quot; class=&quot;headerlink&quot; title=&quot;绘图&quot;&gt;&lt;/a&gt;绘图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ciechanowski.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;神奇的Transform&lt;/a&gt;，看看我们可以通过transform来做点什么，简直太好玩了，不服来看😏😏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift/tree/master/benchmark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift基准测试套件&lt;/a&gt;，包含基准测试驱动以及显示性能的一些度量，协助开发者创建更快更高效的代码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cnbluebox.com/blog/2015/03/05/chisel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chisel-LLDB命令插件，让调试更Easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://camsong.github.io/redux-in-chinese/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux可预测化的状态管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;后花园&quot;&gt;&lt;a href=&quot;#后花园&quot; class=&quot;headerlink&quot; title=&quot;后花园&quot;&gt;&lt;/a&gt;后花园&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=402973995&amp;amp;idx=1&amp;amp;sn=87625ad8a3e3d5b16baa0890d6eedfe8&amp;amp;scene=23&amp;amp;srcid=03050zf9BxGthj6HoRiTCmb3#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;程序员VS武林高手：技术为外功，思维乃内力&lt;/a&gt;，真气雄浑，滚滚不可测，吐气如剑，拈花摘叶，老司机今天带你重新认识当代武林高手－程序员。&lt;/li&gt;
&lt;li&gt;大妈喊你还债了，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=402964742&amp;amp;idx=1&amp;amp;sn=60a657a4eeca714bee80e861406c6443&amp;amp;scene=23&amp;amp;srcid=0305FCtWZQFUXz2Xx4PePzCx#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;年前挖的坑都填了吗？技术债务偿还计划&lt;/a&gt;😄😄&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/ff4a34a5a136&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你不可错过的50部电影清单！（附评分、推荐语）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=404242829&amp;amp;idx=1&amp;amp;sn=aacddf1c2c828281e6202eff8cd374f5&amp;amp;scene=1&amp;amp;srcid=0302Q1dT8nUezoEZLZzistUl&amp;amp;key=710a5d99946419d96e1c7481a2d8dae6400769cbc8bc9015cca38f9694d8c1ae46c0ff571ec714de57c149dd6aef6796&amp;amp;ascene=0&amp;amp;uin=Mzg1OTg2NQ%3D%3D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;并发之痛 Thread，Goroutine，Actor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本周重点在性能优化和Hybrid方面，包含&lt;code&gt;AsyncDisplayKit&lt;/code&gt;的实践，RN相关等，另外App开发人员也应该了解一些API设计，本期重点介绍API建模工具RAML，希望大家能够有所收获。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS技术周刊" scheme="http://yoursite.com/tags/iOS%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>用RAML构建API文档</title>
    <link href="http://yoursite.com/2016/03/06/using-raml-build-api-doc/"/>
    <id>http://yoursite.com/2016/03/06/using-raml-build-api-doc/</id>
    <published>2016-03-05T16:00:00.000Z</published>
    <updated>2016-03-06T13:43:42.000Z</updated>
    
    <content type="html">&lt;p&gt;App开发人员应当了解的一些API知识，熟悉编写API文档的一些工具和方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;RESTful-API&quot;&gt;&lt;a href=&quot;#RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;RESTful API&quot;&gt;&lt;/a&gt;RESTful API&lt;/h2&gt;&lt;p&gt;全称：Representational State Transfer(表现层状态转化)&lt;/p&gt;
&lt;p&gt;其实我们常见的GET, POST等的API都属于这类，RESTful有以下几个关键概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种设计风格而不是标准，只是提供了一组设计原则和约束条件&lt;/li&gt;
&lt;li&gt;资源，用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI&lt;/li&gt;
&lt;li&gt;Method&lt;ul&gt;
&lt;li&gt;GET：用来获取资源&lt;/li&gt;
&lt;li&gt;POST用来新建资源（也可以用于更新资源）&lt;/li&gt;
&lt;li&gt;PUT用来更新资源&lt;/li&gt;
&lt;li&gt;DELETE用来删除资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RAML是啥？&quot;&gt;&lt;a href=&quot;#RAML是啥？&quot; class=&quot;headerlink&quot; title=&quot;RAML是啥？&quot;&gt;&lt;/a&gt;RAML是啥？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://raml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RAML&lt;/a&gt;是一个API建模语言，完全遵守RESTful风格，有严格的语法来约束，采用&lt;a href=&quot;http://www.yaml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yaml&lt;/a&gt;描述，可以通过一系列工具转化为HTML，Wiki等文档样式。&lt;/p&gt;
&lt;h2 id=&quot;开始写一个API&quot;&gt;&lt;a href=&quot;#开始写一个API&quot; class=&quot;headerlink&quot; title=&quot;开始写一个API&quot;&gt;&lt;/a&gt;开始写一个API&lt;/h2&gt;&lt;h3 id=&quot;先装个工具&quot;&gt;&lt;a href=&quot;#先装个工具&quot; class=&quot;headerlink&quot; title=&quot;先装个工具&quot;&gt;&lt;/a&gt;先装个工具&lt;/h3&gt;&lt;p&gt;采用Atom插件 &lt;a href=&quot;http://apiworkbench.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API Workbench&lt;/a&gt; 打造一个可视化工具，自动化提示，语法检测等功能，一应俱全，非常适合编写RAML。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;api-workbench.png&quot; alt=&quot;API Workbench主要功能&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;熟读基本语法&quot;&gt;&lt;a href=&quot;#熟读基本语法&quot; class=&quot;headerlink&quot; title=&quot;熟读基本语法&quot;&gt;&lt;/a&gt;熟读基本语法&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/raml-org/raml-spec/blob/master/raml-0.8.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建API工程&quot;&gt;&lt;a href=&quot;#创建API工程&quot; class=&quot;headerlink&quot; title=&quot;创建API工程&quot;&gt;&lt;/a&gt;创建API工程&lt;/h3&gt;&lt;p&gt;本文例子采用v0.8版本，目前1.0版本配套的工具还不太完善，等后续更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 头部&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#%RAML 0.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;title:&lt;/span&gt; A6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;version:&lt;/span&gt; v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;baseUri:&lt;/span&gt; http://&amp;#123;apiDomain&amp;#125;.hujiang.com/&amp;#123;version&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;baseUriParameters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiDomain:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    description:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      The sub-domain at which the API is accessible.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;    enum:&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt; , &lt;span class=&quot;string&quot;&gt;&quot;yz.test&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;qa.test&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;mediaType:&lt;/span&gt;  application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;protocols:&lt;/span&gt; [ HTTP, HTTPS ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;documentation:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - title:&lt;/span&gt; 类型定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    content:&lt;/span&gt; !include documentation/type-definition.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;resourceTypes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - base:&lt;/span&gt; !include resourceTypes/base.raml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - collection:&lt;/span&gt; !include resourceTypes/collection.raml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;schemas:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - test:&lt;/span&gt; !include schemas/test-schema.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;API 实体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有几个关键词： &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;uriParameters&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;queryParameters&lt;/code&gt;, &lt;code&gt;displayName&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;，具体可参看文档 &lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/test/&amp;#123;uriParam1&amp;#125;/&amp;#123;uriParam2&amp;#125;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;type:&lt;/span&gt; collection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  displayName:&lt;/span&gt; 获取xxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  uriParameters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    screenWidth:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      required:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      displayName:&lt;/span&gt; uriParam1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      description:&lt;/span&gt; uriParam1说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    screenHeight:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      required:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      displayName:&lt;/span&gt; uriParam2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      description:&lt;/span&gt; uriParam2说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  get:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    description:&lt;/span&gt; 获取xx内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    queryParameters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      param1:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        required:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        displayName:&lt;/span&gt; param1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        description:&lt;/span&gt; param1说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        type:&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    responses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        body:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          application/json:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            schema:&lt;/span&gt; test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            example:&lt;/span&gt; !include examples/test-example.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ResourceTypes&quot;&gt;&lt;a href=&quot;#ResourceTypes&quot; class=&quot;headerlink&quot; title=&quot;ResourceTypes&quot;&gt;&lt;/a&gt;ResourceTypes&lt;/h3&gt;&lt;p&gt;资源类型统一描述，常见的统一定义HTTP Header，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;get?:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    Hujiang-Agent:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      description:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        统一的沪江Agent定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;      required:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Documentation&quot;&gt;&lt;a href=&quot;#Documentation&quot; class=&quot;headerlink&quot; title=&quot;Documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;p&gt;API的一些说明性文档，例如某些特定值的定义和说明，注意事项等&lt;/p&gt;
&lt;h3 id=&quot;Schemas&quot;&gt;&lt;a href=&quot;#Schemas&quot; class=&quot;headerlink&quot; title=&quot;Schemas&quot;&gt;&lt;/a&gt;Schemas&lt;/h3&gt;&lt;p&gt;定义返回结构中的数据定义，示例：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;required&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;$schema&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;http://json-schema.org/draft-03/schema&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;array&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;items&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;properties&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;adType&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;integer&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;参看广告类型定义&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;required&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;adId&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;integer&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;description&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;广告位ID&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;required&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;adItemList&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;array&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;description&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;广告条列表，最大不超过6个&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;required&quot;&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;items&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外在API头部可以统一include，方便后续API实体中直接调用。&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;&lt;a href=&quot;#Examples&quot; class=&quot;headerlink&quot; title=&quot;Examples&quot;&gt;&lt;/a&gt;Examples&lt;/h3&gt;&lt;p&gt;根据上述的Schemas，提供一个API返回示例，便于用户更好地了解API，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;adType&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;adId&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;10001&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;adItemList&quot;&lt;/span&gt; : [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;adItemId&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1021021&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;广告条标题&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;summary&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;广告条描述&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;actionType&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;actionUrl&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;http://www.hujiang.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;startTime&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;2016-2-29T17:54:46.203+08:00&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;endTime&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;2016-3-29T17:54:46.203+08:00&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;imageUrl&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;http://i2.w.hjfile.cn/news/201602/201602247003009941.jpg&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;orderIndex&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;fillColor&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1023123123123&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;scheme&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;hujiang://&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;appIdentifier&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;com.hujiang.normandy&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ... ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成HTML或wiki&quot;&gt;&lt;a href=&quot;#生成HTML或wiki&quot; class=&quot;headerlink&quot; title=&quot;生成HTML或wiki&quot;&gt;&lt;/a&gt;生成HTML或wiki&lt;/h3&gt;&lt;p&gt;基本差不多了，就要以找一些工具转成用户可以直观看到的文档，可以使用如下工具：&lt;/p&gt;
&lt;p&gt;raml2html: &lt;a href=&quot;https://github.com/raml2html/raml2html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/raml2html/raml2html&lt;/a&gt;&lt;br&gt;raml2wiki: &lt;a href=&quot;https://github.com/jhitchcock/raml2wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jhitchcock/raml2wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;它还可以做什么&quot;&gt;&lt;a href=&quot;#它还可以做什么&quot; class=&quot;headerlink&quot; title=&quot;它还可以做什么&quot;&gt;&lt;/a&gt;它还可以做什么&lt;/h2&gt;&lt;p&gt;既然是建模语言，所有的API定义，返回值都非常方便结构化，利用这些数据我们可以自制mock server，将API整个流程打通，非常期待大家的参与。&lt;/p&gt;
&lt;h2 id=&quot;RAML-vs-Swagger-vs-API-Blueprint&quot;&gt;&lt;a href=&quot;#RAML-vs-Swagger-vs-API-Blueprint&quot; class=&quot;headerlink&quot; title=&quot;RAML vs. Swagger vs. API Blueprint&quot;&gt;&lt;/a&gt;RAML vs. Swagger vs. API Blueprint&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mikestowe&lt;/a&gt;上有专门针对这三类做了比较，最后综合得分RAML排首位，当然大家也要结合当下团队实力，选择合适的工具&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://raml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RAML 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;atom 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bourgeois.me/rest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;REST best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codeplanet.io/principles-good-restful-api-design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Principles of good RESTful API Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yaml.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mikestowe.com/2014/07/raml-vs-swagger-vs-api-blueprint.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RAML vs. Swagger vs. API Blueprint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;App开发人员应当了解的一些API知识，熟悉编写API文档的一些工具和方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>深度实践 AsyncDisplayKit</title>
    <link href="http://yoursite.com/2016/03/05/asyncdisplaykit-practice/"/>
    <id>http://yoursite.com/2016/03/05/asyncdisplaykit-practice/</id>
    <published>2016-03-04T16:00:00.000Z</published>
    <updated>2016-03-06T11:18:40.000Z</updated>
    
    <content type="html">&lt;p&gt;追求极致的用户体验，从来都是我们锲而不舍的追求，对于iOS用户而言，这更是容不得一点马虎。随着时间的推移，现如今，谁还能忍受得了一个页面打开后，半天没有结果😭，出来之后滑动卡顿，点击个按钮半天木有反应啊，有木有？还好，还有&lt;code&gt;Facebook&lt;/code&gt;，这位互联网IT界的大佬，为我们带来了福音，它就是我们今天要讲的&lt;code&gt;AsyncDisplayKit&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;AsyncDisplayKit&lt;/code&gt; 可以给我们带来很棒的用户体验，主要是通过优化以下3点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像解码&lt;/li&gt;
&lt;li&gt;页面布局&lt;/li&gt;
&lt;li&gt;页面元素渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过把以上几项操作放在后台线程，从而避免了阻塞用户主线程。所以，通过这个库，如果使用得当，即使是复杂的页面布局我们仍可以获得丝滑般的无限接近60FPS的页面滚动体验，这一点，通过常规的&lt;code&gt;UIKit&lt;/code&gt;优化一般是达不到这个效果的😏。&lt;/p&gt;
&lt;p&gt;在本文中，我们通过一个开始的初级项目（主要是使用了&lt;code&gt;UICollectionView&lt;/code&gt;，有一些滚动体验不佳），通过使用&lt;code&gt;AsyncDisplayKit&lt;/code&gt;来优化提升它的性能。跟着我走，你将会学会如何在你自己的项目中使用  &lt;code&gt;AsyncDisplayKit&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;br&gt;注意: 在开始之前, 你最好对 Swift, Core Animation 和 Core Graphics这些知识已经有所了解.&lt;/p&gt;
&lt;h2 id=&quot;开始了&quot;&gt;&lt;a href=&quot;#开始了&quot; class=&quot;headerlink&quot; title=&quot;开始了&quot;&gt;&lt;/a&gt;开始了&lt;/h2&gt;&lt;p&gt;开始之前，如果有时间的话，你最好看一下&lt;a href=&quot;https://code.facebook.com/posts/721586784561674/introducing-AsyncDisplayKit-for-smooth-and-responsive-apps-on-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncDisplayKit的介绍&lt;/a&gt;，这样你会对 &lt;code&gt;AsyncDisplayKit&lt;/code&gt;的主要功能有一个初步的认识。项目源码&lt;em&gt;(EMAIL ME:1043370115@QQ.COM)&lt;/em&gt;，先跑起来看看（需要Xcode 6.3 和 the iOS 8.3 SDK 以上环境）。为了能比较明显的看到使用这个库的差异，最好在老一点的设备上运行，如果是模拟器，看到的性能提升不明显，你懂的😏。运行起来，看起来是这样的:&lt;br&gt;&lt;img src=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2014/10/IMG_0002.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;像你现在看到的，这个app的主页面是一个众多动物卡片组成的一个&lt;code&gt;UICollectionView&lt;/code&gt;,每一个卡片包含了一张图片，一条文字描述，以及一个由主图片经过模糊处理的背景。&lt;br&gt;&lt;/p&gt;
&lt;p&gt; 滚动一下这个页面，注意它的帧率，（我使用的是iPad 3，大概只有20FPS），失帧很严重啊，所以你的直观触觉就是界面很不流畅，卡顿实实在在的。好吧，在这篇文章结束的时候，我们的目标就是要把它搞到（或者无限接近）60FPS。&lt;br&gt;&lt;/p&gt;
&lt;p&gt; &amp;gt;&lt;br&gt; 注意: 这个项目里你看到的所有图片都是放在本地地资源文件里面的，没有一个是从网络下载来的。&lt;/p&gt;
&lt;h2 id=&quot;测试响应能力&quot;&gt;&lt;a href=&quot;#测试响应能力&quot; class=&quot;headerlink&quot; title=&quot;测试响应能力&quot;&gt;&lt;/a&gt;测试响应能力&lt;/h2&gt;&lt;p&gt;在使用&lt;code&gt;AsyncDisplayKit&lt;/code&gt;优化你的项目之前，先通过&lt;code&gt;Instruments&lt;/code&gt;来检测一下你的应用的响应能力，这一点很重要，可以确保你知道优化后&lt;code&gt;AsyncDisplayKit&lt;/code&gt;给你带来了什么变化。&lt;br&gt;&lt;br&gt;最重要的是，影响性能的因素中，无非就是&lt;code&gt;CPU&lt;/code&gt;，&lt;code&gt;GPU&lt;/code&gt;这两块，所以优化前，你应该首先弄清楚你的性能瓶颈在哪里，究竟是受制于&lt;code&gt;CPU&lt;/code&gt;还是&lt;code&gt;GPU&lt;/code&gt;，是哪一个降低了你应用的FPS。搞清楚这个之后，你可以看到&lt;code&gt;AsyncDisplayKit&lt;/code&gt;是如何利用它的特性来帮你优化的。&lt;br&gt;&lt;br&gt;如果你有时间的话，你可以使用&lt;code&gt;Instruments&lt;/code&gt;来监测一下我们一开始提供的那个项目的性能瓶颈，你会发现它是受制于&lt;code&gt;CPU&lt;/code&gt;的。&lt;/p&gt;
&lt;h2 id=&quot;准备切换到AsyncDisplayKit&quot;&gt;&lt;a href=&quot;#准备切换到AsyncDisplayKit&quot; class=&quot;headerlink&quot; title=&quot;准备切换到AsyncDisplayKit&quot;&gt;&lt;/a&gt;准备切换到AsyncDisplayKit&lt;/h2&gt;&lt;p&gt;在已存在的项目上使用&lt;code&gt;AsyncDisplayKit&lt;/code&gt;很简单，就是把&lt;code&gt;view hierarchies&lt;/code&gt;或者/和 &lt;code&gt;layer trees&lt;/code&gt;替换为&lt;code&gt;display node hierarchies&lt;/code&gt;。  &lt;code&gt;Display nodes&lt;/code&gt;是&lt;code&gt;AsyncDisplayKit&lt;/code&gt;中很重要的一个概念，它是基于views之上并且线程安全的，这意味着我们平常习惯于在主线程中做的那些views有关的部分工作现在可以脱离主线程了，是不是很惊奇？没错，这就是最大的魅力所在，所以你就可以把有限的资源去处理更重要的事情了，比如&lt;code&gt;touch event&lt;/code&gt;或者&lt;code&gt;scroll view&lt;/code&gt;的滚动。所以接下来第一步，就是去掉&lt;code&gt;view hierarchy&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Removing-the-View-Hierarchy&quot;&gt;&lt;a href=&quot;#Removing-the-View-Hierarchy&quot; class=&quot;headerlink&quot; title=&quot;Removing the View Hierarchy&quot;&gt;&lt;/a&gt;Removing the View Hierarchy&lt;/h3&gt;&lt;p&gt;打开 &lt;code&gt;RainforestCardCell.swift&lt;/code&gt;，在 &lt;code&gt;awakeFromNib()&lt;/code&gt; 删除所有的 &lt;code&gt;addSubview(...)&lt;/code&gt; 调用, 像这样:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.awakeFromNib()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  contentView.layer.borderColor =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;(hue: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, saturation: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, brightness: &lt;span class=&quot;number&quot;&gt;0.85&lt;/span&gt;, alpha: &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;).&lt;span class=&quot;type&quot;&gt;CGColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  contentView.layer.borderWidth = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;替换&lt;code&gt;layoutSubviews()&lt;/code&gt; 为下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.layoutSubviews()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;替换&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt; 为下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configureCellDisplayWithCardInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cardInfo: RainforestCardInfo)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//MARK: Image Size Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: cardInfo.imageName)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  featureImageSizeOptional = image.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;删除&lt;code&gt;RainforestCardCell&lt;/code&gt;中所有的&lt;code&gt;view&lt;/code&gt;属性，剩下来的像这样：&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RainforestCardCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; featureImageSizeOptional: &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后保存并运行，结果像这样：&lt;br&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2014/10/IMG_0001.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;现在都是一些空的cells,所以你滚动起来相当顺滑，我们的目标就是当这些cell填上内容之后，仍然保持这样的触感。在你每做一步之后，你可以使用&lt;code&gt;Instruments’s Core Animation template&lt;/code&gt;来观察app的帧率有什么变化。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Adding-a-Placeholder&quot;&gt;&lt;a href=&quot;#Adding-a-Placeholder&quot; class=&quot;headerlink&quot; title=&quot;Adding a Placeholder&quot;&gt;&lt;/a&gt;Adding a Placeholder&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;RainforestCardCell.swift&lt;/code&gt;中添加一个属性&lt;code&gt;placeholderLayer&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RainforestCardCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; featureImageSizeOptional: &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; placeholderLayer: &lt;span class=&quot;type&quot;&gt;CALayer&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用placeholder是因为我们的cell的内容展示的时候是异步的，为了不让用户看到空的cell。这就像我们从网络下载图片的时候的做法一样，当图片下载完成之前先设置一个placeholder。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;awakeFromNib()&lt;/code&gt;中，配置&lt;code&gt;placeholderLayer&lt;/code&gt;，然后该方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;awakeFromNib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.awakeFromNib()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	placeholderLayer = &lt;span class=&quot;type&quot;&gt;CALayer&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	placeholderLayer.contents = 	&lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named:&lt;span class=&quot;string&quot;&gt;&quot;cardPlaceholder&quot;&lt;/span&gt;)!.&lt;span class=&quot;type&quot;&gt;CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	placeholderLayer.contentsGravity = kCAGravityCenter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	placeholderLayer.contentsScale = &lt;span class=&quot;type&quot;&gt;UIScreen&lt;/span&gt;.mainScreen().scale&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	placeholderLayer.backgroundColor = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;(hue: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, saturation: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, 		brightness: &lt;span class=&quot;number&quot;&gt;0.85&lt;/span&gt;, alpha: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;type&quot;&gt;CGColor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	contentView.layer.addSublayer(placeholderLayer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;layoutSubviews()&lt;/code&gt;, 加载&lt;code&gt;placeholderLayer&lt;/code&gt;,修改后的方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.layoutSubviews()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	placeholderLayer?.frame = bounds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行，看起来是这样：&lt;br&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2014/10/IMG_0003.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;普通的&lt;code&gt;CALayers&lt;/code&gt;单独使用，没有与view关联的时候，当你改变frame的时候它们会有一个隐式的动画，所以你应该会看到当那个layer加载出来的时候有一个缩放的动画，为了修改这个问题，我们重写&lt;code&gt;layoutSubviews&lt;/code&gt;方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layoutSubviews&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.layoutSubviews()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;CATransaction&lt;/span&gt;.begin()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;CATransaction&lt;/span&gt;.setValue(kCFBooleanTrue,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  forKey:kCATransactionDisableActions)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  placeholderLayer?.frame = bounds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;CATransaction&lt;/span&gt;.commit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新编译运行，你会发现刚才的问题解决了。&lt;/p&gt;
&lt;h2 id=&quot;Your-First-Node&quot;&gt;&lt;a href=&quot;#Your-First-Node&quot; class=&quot;headerlink&quot; title=&quot;Your First Node&quot;&gt;&lt;/a&gt;Your First Node&lt;/h2&gt;&lt;p&gt;我们要重构这个app的第一步就是添加一个node，在这一部分，我们将要处理以下几个任务：&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建，布局，添加 node 到 cell 中&lt;/li&gt;
&lt;li&gt;重用 cell 以及其中的 node 和 layer&lt;/li&gt;
&lt;li&gt;对 image node 做 blur 处理 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，在 &lt;code&gt;Layers-Bridging-Header.h&lt;/code&gt;中导入&lt;code&gt;AsyncDisplayKit&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;lt;AsyncDisplayKit/AsyncDisplayKit.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;项目结构梳理&quot;&gt;&lt;a href=&quot;#项目结构梳理&quot; class=&quot;headerlink&quot; title=&quot;项目结构梳理&quot;&gt;&lt;/a&gt;项目结构梳理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;View Controller : &lt;code&gt;RainforestViewController&lt;/code&gt; 实际上不做什么事情，只是简单的获得数据源并实现&lt;code&gt;UICollectionView&lt;/code&gt;的代理。&lt;/li&gt;
&lt;li&gt;Data Source : view controller 生成并重用cell，通过调用&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;配置cell。&lt;/li&gt;
&lt;li&gt;Cell : 在 &lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;方法中，cell生成node并添加到cell上面，然后布局nodes。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着每一次重用cell的时候，都会重复这些动作 。&lt;br&gt;如果你是用views代替nodes，那这样绝对不是最好的做法。但是现在用的是nodes，因为nodes的生成，布局以及填充，这些步骤都是可以放在异步线程做的，所以目前还不是问题，当然我们后续还会优化。唯一的问题是这样做的话，你不能很方便的取消这些异步操作或者是在重用cell的时候删除nodes。&lt;/p&gt;
&lt;p&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note : 在实际的开发中，你可以选择使用ASRangeController来缓存nodes，这样你就不需要在每次重用cell的时候去重新生成nodes。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Adding-the-Background-Image-Node&quot;&gt;&lt;a href=&quot;#Adding-the-Background-Image-Node&quot; class=&quot;headerlink&quot; title=&quot;Adding the Background Image Node&quot;&gt;&lt;/a&gt;Adding the Background Image Node&lt;/h3&gt;&lt;p&gt;打开 &lt;code&gt;RainforestCardCell.swift&lt;/code&gt; 然后替换 &lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt; 为如下:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configureCellDisplayWithCardInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cardInfo: RainforestCardInfo)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;//MARK: Image Size Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: cardInfo.imageName)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	featureImageSizeOptional = image.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;//MARK: Node Creation Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; backgroundImageNode = &lt;span class=&quot;type&quot;&gt;ASImageNode&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	backgroundImageNode.image = image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	backgroundImageNode.contentMode = .&lt;span class=&quot;type&quot;&gt;ScaleAspectFill&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ASImageNode&lt;/code&gt;是&lt;code&gt;AsyncDisplayKit&lt;/code&gt;中用来做展示用的众多nodes中的一种，等价于&lt;code&gt;UIKit&lt;/code&gt;中的&lt;code&gt;UIImageView&lt;/code&gt;，只是&lt;code&gt;ASImageNode&lt;/code&gt;默认情况下的图片解码操作是异步的。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;的末尾添加下面一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;backgroundImageNode.layerBacked = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nodes有两种模式，一般情况下当需要处理某些事件的时候比如&lt;code&gt;touch event&lt;/code&gt;，我们采用&lt;code&gt;view-backed&lt;/code&gt;模式，反之如果只是纯粹的展示则采用&lt;code&gt;layer-backed&lt;/code&gt;模式，&lt;code&gt;layer-backed&lt;/code&gt;模式相对而言是轻量级的，会有更好一点的性能。由于我们这个项目中不需要处理事件，所以&lt;code&gt;backgroundImageNode&lt;/code&gt;采用&lt;code&gt;layer-backed&lt;/code&gt;模式。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;的末尾继续添加下面一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MARK: Node Layout Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backgroundImageNode.frame = &lt;span class=&quot;type&quot;&gt;FrameCalculator&lt;/span&gt;.frameForContainer(featureImageSize: image.size)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;FrameCalculator&lt;/code&gt;是个辅助类，封装了cell的布局处理，返回每一个node的frame。如果你要适配多个设备尺寸，这里你要谨慎处理，你可以看到这里没有使用约束，因为&lt;code&gt;AsyncDisplayKit&lt;/code&gt;目前版本并不支持约束，希望后续支持吧。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;的末尾继续添加下面一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MARK: Node Layer and Wrap Up Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentView.layer.addSublayer(backgroundImageNode.layer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面已经提到了，&lt;code&gt;AsyncDisplayKit&lt;/code&gt;会为&lt;code&gt;backgroundImageNode&lt;/code&gt;创建一个layer，但是你仍然需要把这个node添加到&lt;code&gt;layer tree&lt;/code&gt;中，它才可以在屏幕上显示。另外由于node的绘制是异步的，所以在绘制完成之前它是不会显示的，尽管你已经把它添加到&lt;code&gt;layer tree&lt;/code&gt;中了，这一点需要注意。当node的图片绘制完成之后，node的layer的content就会被更新，这个时候cell的 &lt;code&gt;content view&lt;/code&gt;的layer会有两个sublayer.&lt;/p&gt;
&lt;p&gt;你应该会注意到cell每次被取出重用的时候，&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;都会被调用，所以每次该方法调用的时候，我们都会添加一个新的layer到cell的contentview的layer上面，不过别担心，我们马上就会解决这个问题。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;RainforestCardCell.swift&lt;/code&gt;中新添加一个变量&lt;code&gt;backgroundImageNode&lt;/code&gt;像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RainforestCardCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; featureImageSizeOptional: &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; placeholderLayer: &lt;span class=&quot;type&quot;&gt;CALayer&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; backgroundImageNode: &lt;span class=&quot;type&quot;&gt;ASImageNode&lt;/span&gt;? &lt;span class=&quot;comment&quot;&gt;///&amp;lt; ADD THIS LINE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加这个属性我们可以持有这个node，是因为在&lt;code&gt;ARC&lt;/code&gt;环境下，某些时候它会被释放，这样就不会显示在屏幕上了。node是持有它的layer的引用的，但是它的layer并不持有node，所以我们需要持有这个node。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;的末尾继续添加下面一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.backgroundImageNode = backgroundImageNode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，目前为止，&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;是这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configureCellDisplayWithCardInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cardInfo: RainforestCardInfo)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//MARK: Image Size Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(named: cardInfo.imageName)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  featureImageSizeOptional = image.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//MARK: Node Creation Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; backgroundImageNode = &lt;span class=&quot;type&quot;&gt;ASImageNode&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  backgroundImageNode.image = image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  backgroundImageNode.contentMode = .&lt;span class=&quot;type&quot;&gt;ScaleAspectFill&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  backgroundImageNode.layerBacked = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//MARK: Node Layout Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  backgroundImageNode.frame = &lt;span class=&quot;type&quot;&gt;FrameCalculator&lt;/span&gt;.frameForContainer(featureImageSize: image.size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//MARK: Node Layer and Wrap Up Section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentView.layer.addSublayer(backgroundImageNode.layer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.backgroundImageNode = backgroundImageNode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行，你可以观察到&lt;code&gt;backgroundImageNode&lt;/code&gt;的图片的异步呈现，感觉一下效果吧。&lt;br&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2014/10/IMG_0006.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你运行在一个老一点的设备上，你会发现那些cell上的图片像爆米花一样一个个跳出来了，这并不是我们的理想结果，这个问题我们会放在最后解决。&lt;/p&gt;
&lt;p&gt;正如上面我已经提到的，每次cell重用的时候，都会有一个新的layer被加上去，你可以快速滚动页面，然后打个断点在cell里面，会发现很有多layer在上面，接下来我们就来处理这个问题。&lt;/p&gt;
&lt;h3 id=&quot;Handling-Cell-Reuse&quot;&gt;&lt;a href=&quot;#Handling-Cell-Reuse&quot; class=&quot;headerlink&quot; title=&quot;Handling Cell Reuse&quot;&gt;&lt;/a&gt;Handling Cell Reuse&lt;/h3&gt;&lt;p&gt;首先继续在&lt;code&gt;RainforestCardCell.swift&lt;/code&gt;, 添加个&lt;code&gt;contentLayer&lt;/code&gt;，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RainforestCardCell&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; featureImageSizeOptional: &lt;span class=&quot;type&quot;&gt;CGSize&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; placeholderLayer: &lt;span class=&quot;type&quot;&gt;CALayer&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; backgroundImageNode: &lt;span class=&quot;type&quot;&gt;ASImageNode&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contentLayer: &lt;span class=&quot;type&quot;&gt;CALayer&lt;/span&gt;? &lt;span class=&quot;comment&quot;&gt;///&amp;lt; ADD THIS LINE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;的末尾继续添加下面一行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.contentLayer = backgroundImageNode.layer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后替换 &lt;code&gt;prepareForReuse()&lt;/code&gt;方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepareForReuse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.prepareForReuse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	backgroundImageNode?.preventOrCancelDisplay = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于&lt;code&gt;AsyncDisplayKit&lt;/code&gt;可以异步绘制，nodes可以让你阻止任何正在进行的绘制，当你需要取消或者停止绘制的时候只需要设置它的&lt;code&gt;preventOrCancelDisplay&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;即可，这样你就可以在cell重用之前停止之前的所有绘制，是不是很赞？&lt;/p&gt;
&lt;p&gt;接下来，在&lt;code&gt;prepareForReuse()&lt;/code&gt;中再添加几行代码，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;contentLayer?.removeFromSuperlayer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contentLayer = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backgroundImageNode = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这几行代码简单易懂，就是在cell重用之前，把相应的layer和node都删除，并确保被释放掉，这样就解决了上面提到的layer堆积的问题。&lt;br&gt;编译运行，这一次就不会有layer堆积了，并且在cell滚出屏幕可视范围后，取消不必要的绘制。&lt;/p&gt;
&lt;h3 id=&quot;Blurring-the-Image&quot;&gt;&lt;a href=&quot;#Blurring-the-Image&quot; class=&quot;headerlink&quot; title=&quot;Blurring the Image&quot;&gt;&lt;/a&gt;Blurring the Image&lt;/h3&gt;&lt;p&gt;为了添加blur效果，需要我们在imagenode的展示过程中加入一些步骤。在&lt;code&gt;RainforestCardCell.swift&lt;/code&gt;文件的&lt;code&gt;configureCellDisplayWithCardInfo(cardInfo:)&lt;/code&gt;方法中做点修改，在&lt;code&gt;backgroundImageNode.layerBacked = true&lt;/code&gt;后面添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;backgroundImageNode.imageModificationBlock = &amp;#123; input &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; input == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; blurredImage = input.applyBlurWithRadius(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tintColor: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;(white: &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, alpha: &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    saturationDeltaFactor: &lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maskImage: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    didCancel:&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; blurredImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ASImageNode&lt;/code&gt;的&lt;code&gt;imageModificationBlock&lt;/code&gt;给了我们一个机会在展示原始图片之前可以做一些其他的操作，比如滤镜操作，模糊处理等。&lt;/p&gt;
&lt;p&gt;上面的代码，使用&lt;code&gt;imageModificationBlock&lt;/code&gt;，给cell的背景图加上了模糊效果。最关键的一点是imagenode把绘制动作和这个闭包操作放在了子线程，这样就使主线程运行顺畅，这个闭包把原始图片作为参数然后返回处理后的图片。&lt;/p&gt;
&lt;p&gt;这个模糊处理是使用了系统的方法，&lt;code&gt;UIImage&lt;/code&gt; 的 &lt;code&gt;blurring category&lt;/code&gt;，它主要是使用&lt;code&gt;Accelerate framework&lt;/code&gt; 基于&lt;code&gt;CPU&lt;/code&gt;来做的模糊操作。由于这个模糊处理会消耗内存同时也比较耗时，所以就支持了取消机制，&lt;code&gt;didCancel&lt;/code&gt;闭包会被多次调用来监测是否应该取消模糊操作。目前为止，上面的代码只是简单返回了&lt;code&gt;false&lt;/code&gt;，稍后我们就会来实际修改&lt;code&gt;didCancel&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Note&lt;/span&gt; : 还记得一开始的时候你滑动页面的时候是什么感觉么？那个模糊处理严重的阻塞了主线程，通过&lt;span class=&quot;type&quot;&gt;AsyncDisplayKit&lt;/span&gt;把这个操作放入子线程，现在大大提升了collection view滚动时候的体验。这简直就是一个天上，一个地下啊，有木有？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行看看现在的效果吧：&lt;br&gt;&lt;img src=&quot;http://www.raywenderlich.com/wp-content/uploads/2014/10/IMG_0009.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在你可以看到&lt;code&gt;collection view&lt;/code&gt;滚动起来是有多么的顺滑。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;collection view&lt;/code&gt;从重用队列取出一个cell重用的时候就开始了一个模糊处理操作，所以当你快速滚动的时候，&lt;code&gt;collection view&lt;/code&gt;就会重用每一个cell很多次，理所当然的就启动了很多模糊处理的操作。这个当然不合理了😏😏，所以我们的目标应该是当一个cell开始重用的时候，去取消之前的模糊处理操作。&lt;/p&gt;
&lt;p&gt;在前面我们已经可以在&lt;code&gt;prepareForReuse()&lt;/code&gt;中取消node的绘制，所以一旦我们有机会在合适的时候取消模糊操作的话，那就毫不犹豫的去取消吧。&lt;/p&gt;
&lt;h3 id=&quot;Canceling-the-Blur&quot;&gt;&lt;a href=&quot;#Canceling-the-Blur&quot; class=&quot;headerlink&quot; title=&quot;Canceling the Blur&quot;&gt;&lt;/a&gt;Canceling the Blur&lt;/h3&gt;&lt;p&gt;为了取消那些正在进行的blur操作，我们需要重新实现blur方法中的&lt;code&gt;didCancel&lt;/code&gt;闭包。添加如下代码到&lt;code&gt;imageModificationBlock&lt;/code&gt;中：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;backgroundImageNode.imageModificationBlock = &amp;#123; [&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; backgroundImageNode] input &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; input == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ADD FROM HERE...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; didCancelBlur: () -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isCancelled = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; strongBackgroundImageNode = backgroundImageNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; isCancelledClosure = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isCancelled = strongBackgroundImageNode.preventOrCancelDisplay&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSThread&lt;/span&gt;.isMainThread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isCancelledClosure()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_sync(dispatch_get_main_queue(), isCancelledClosure)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isCancelled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...TO HERE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很明显，我们这里需要使用一个&lt;code&gt;weak reference&lt;/code&gt;来避免&lt;code&gt;closure&lt;/code&gt;和&lt;code&gt;backgroundImageNode&lt;/code&gt;的循环引用。我们就使用&lt;code&gt;backgroundImageNode&lt;/code&gt;来决定是否需要取消模糊处理。&lt;/p&gt;
&lt;p&gt;上面的代码完成了如下几个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先获得&lt;code&gt;backgroundImageNode&lt;/code&gt;的一个强引用，为我们接下来的操作做准备。如果当这个闭包运行的时候&lt;code&gt;backgroundImageNode&lt;/code&gt;不存在了，那么&lt;code&gt;isCancelled&lt;/code&gt;就会为&lt;code&gt;true&lt;/code&gt;，blur操作就会被取消，那我们就别提做什么blur操作了。&lt;/li&gt;
&lt;li&gt;你会有疑问，在这个地方为什么取消blur的这个闭包中的代码会要求放在主线程来操作，这是因为一旦node创建了它的&lt;code&gt;layer&lt;/code&gt;或者&lt;code&gt;view&lt;/code&gt;之后，你就只能在主线程来访问node的属性了（这一点很重要）。由于我们需要使用node的&lt;code&gt;preventOrCancelDisplay&lt;/code&gt;这个属性，而此时&lt;code&gt;backgroundImageNode&lt;/code&gt;的layer已经创建过了，所以我们必须把这个监测放在主线程中。&lt;/li&gt;
&lt;li&gt;由于我们需要确保&lt;code&gt;isCancelledClosure&lt;/code&gt;会在主线程来被调用，所以如果是在主线程就直接访问&lt;code&gt;preventOrCancelDisplay&lt;/code&gt;，否则的话就使用&lt;code&gt;dispatch_sync&lt;/code&gt;来在主线程访问。你又有疑问么😏，这里又为什么使用&lt;code&gt;dispatch_sync&lt;/code&gt;来同步执行，是因为我们必须在&lt;code&gt;didCancelBlur&lt;/code&gt;闭包返回之前给一个明确的结果，即返回一个确切的&lt;code&gt;isCancelled&lt;/code&gt;值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，在调用&lt;code&gt;applyBlurWithRadius(...)&lt;/code&gt;方法的地方，把刚才我们定义好的闭包作为值传给&lt;code&gt;didCancel&lt;/code&gt;这个参数，所以代码看起来像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; blurredImage = input.applyBlurWithRadius(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tintColor: &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;(white: &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, alpha: &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  saturationDeltaFactor: &lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maskImage: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  didCancel: didCancelBlur) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行，你会发现有很大不同，现在当cell滚出屏幕后，它相应的blur操作也会被取消，这样我们会节省很多内存开销，同时减少了不必要的CPU时间片占用。你将会看到巨大的性能提升，尤其是在配置低一点的设备上。&lt;/p&gt;
&lt;p&gt;当然了，也不可能把所有的操作都搬到子线程，我们的卡片还需要其他的数据展示，在接下来的文章中，我们还将学习以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个node容器来绘制其他内容并添加到一个单一的&lt;code&gt;CALayer&lt;/code&gt;上面；&lt;/li&gt;
&lt;li&gt;自定义&lt;code&gt;ASDisplayNode&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在子线程来创建node层级并布局sub nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以接下来，敬请期待吧😊😊😊&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;追求极致的用户体验，从来都是我们锲而不舍的追求，对于iOS用户而言，这更是容不得一点马虎。随着时间的推移，现如今，谁还能忍受得了一个页面打开后，半天没有结果😭，出来之后滑动卡顿，点击个按钮半天木有反应啊，有木有？还好，还有&lt;code&gt;Facebook&lt;/code&gt;，这位互联网IT界的大佬，为我们带来了福音，它就是我们今天要讲的&lt;code&gt;AsyncDisplayKit&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="页面布局" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>探索Today Extension的奥秘</title>
    <link href="http://yoursite.com/2016/03/01/swift-today-extension-practice/"/>
    <id>http://yoursite.com/2016/03/01/swift-today-extension-practice/</id>
    <published>2016-02-29T16:00:00.000Z</published>
    <updated>2016-03-05T11:59:27.000Z</updated>
    
    <content type="html">&lt;p&gt;本文重点介绍Today Extension的机制，并通过一个Demo讲解整个实现过程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;extension并不是一个独立的app，它有一个包含在 app bundle 中的独立 bundle，extension 的bundle 后缀名是 .appex。其生命周期也和普通 app 不同。&lt;/li&gt;
&lt;li&gt;extension不能单独存在，必须有一个包含它的 Containing app。&lt;/li&gt;
&lt;li&gt;extension 需要用户手动激活  比如 Today 中的 widget 需要在 Today 中激活和关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Today-extension-的特点&quot;&gt;&lt;a href=&quot;#Today-extension-的特点&quot; class=&quot;headerlink&quot; title=&quot;Today extension 的特点&quot;&gt;&lt;/a&gt;Today extension 的特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以在锁屏情况下 快速查看&lt;/li&gt;
&lt;li&gt;及时 简单直观 快速&lt;/li&gt;
&lt;li&gt;简单交互 不可以输入 打开 Container APP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;app_extensions_lifecycle.png&quot; alt=&quot;生命周期&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;可以看到 Today 的生命周期分为3步 &lt;/p&gt;
&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;在用户打开Today 点击extension时，系统就会加载extension应用，这是生命周期的开始。&lt;/p&gt;
&lt;h3 id=&quot;执行任务&quot;&gt;&lt;a href=&quot;#执行任务&quot; class=&quot;headerlink&quot; title=&quot;执行任务&quot;&gt;&lt;/a&gt;执行任务&lt;/h3&gt;&lt;p&gt;extension启动后，开始执行它的代码。&lt;/p&gt;
&lt;h3 id=&quot;终止&quot;&gt;&lt;a href=&quot;#终止&quot; class=&quot;headerlink&quot; title=&quot;终止&quot;&gt;&lt;/a&gt;终止&lt;/h3&gt;&lt;p&gt;在用户取消任务，或者任务执行结束,系统会将其杀掉。&lt;/p&gt;
&lt;h2 id=&quot;通讯&quot;&gt;&lt;a href=&quot;#通讯&quot; class=&quot;headerlink&quot; title=&quot;通讯&quot;&gt;&lt;/a&gt;通讯&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;detailed_communication.png&quot; alt=&quot;通讯&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extension 是属于Today的插件 它和Today的通讯是直接的&lt;/li&gt;
&lt;li&gt;通过openURL的方式打开Container APP 当然也可打开其它的应用&lt;/li&gt;
&lt;li&gt;通过一个公共的数据区与Container来交换数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据共享&quot;&gt;&lt;a href=&quot;#数据共享&quot; class=&quot;headerlink&quot; title=&quot;数据共享&quot;&gt;&lt;/a&gt;数据共享&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;app_extensions_container_restrictions.png&quot; alt=&quot;数据共享&quot;&gt;&lt;br&gt;公共的数据区 extension 和 Container 都可以读写&lt;br&gt;其实是一个配置了相同 groupId 的 NSUserDefault&lt;/p&gt;
&lt;h2 id=&quot;Today-的尺寸&quot;&gt;&lt;a href=&quot;#Today-的尺寸&quot; class=&quot;headerlink&quot; title=&quot;Today 的尺寸&quot;&gt;&lt;/a&gt;Today 的尺寸&lt;/h2&gt;&lt;h3 id=&quot;iOS不同设备-Today-的宽度&quot;&gt;&lt;a href=&quot;#iOS不同设备-Today-的宽度&quot; class=&quot;headerlink&quot; title=&quot;iOS不同设备 Today 的宽度&quot;&gt;&lt;/a&gt;iOS不同设备 Today 的宽度&lt;/h3&gt;&lt;p&gt;iphone4s /5/5s/6/6s 只有竖屏一种情况 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;设备&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;横屏左&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;横屏右&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;竖屏左&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;竖屏右&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iphone6/6s plus iOS 8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;666&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;666&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;414&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;414&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iphone6/6s plus iOS 9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;736&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;736&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;414&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;414&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iPad&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;471&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;328&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;512&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iPad Pro&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;629&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;437&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;471&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;328&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到 不同的设备 extension 的宽度是很不一样的&lt;br&gt;iPhone Plus 可以横屏&lt;br&gt;iPad 在横屏时候 分为左边和右边&lt;br&gt;iPad Pro 情况就更复杂,竖屏的时候相当于 iPad 的横屏 横屏的时候 宽度也很大&lt;br&gt;所以在设计 Extension 时候 最好用 autoLayout&lt;/p&gt;
&lt;h2 id=&quot;实践&quot;&gt;&lt;a href=&quot;#实践&quot; class=&quot;headerlink&quot; title=&quot;实践&quot;&gt;&lt;/a&gt;实践&lt;/h2&gt;&lt;p&gt;下面就花10分钟来 实践写一个最简单的 extension 具体可以看 Demo.&lt;br&gt;在 Demo 里我弄了一个非常简单的 App 就只是一个UITextField 和一个button&lt;br&gt;点击 OK 按钮, 会把UITextField的文本保存到公共的 Userdefault 里面. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;APPMain.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;当然还开启了一个 scheme 用来让 extension 可以通过 openUrl 来打开&lt;br&gt;另外 有一个 shareData文件&lt;br&gt;代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShareData&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;string&quot;&gt;&quot;com.hujiang.key&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;GroupName&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;group.open.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; scheme = &lt;span class=&quot;string&quot;&gt;&quot;testExtension-appextention://&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getShareData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; userDefault = &lt;span class=&quot;type&quot;&gt;NSUserDefaults&lt;/span&gt;(suiteName: &lt;span class=&quot;type&quot;&gt;GroupName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; userDefault?.objectForKey(key) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveShareData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string: String)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shareDefault = &lt;span class=&quot;type&quot;&gt;NSUserDefaults&lt;/span&gt;(suiteName: &lt;span class=&quot;type&quot;&gt;GroupName&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	shareDefault?.setObject(string, forKey: key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	shareDefault?.synchronize()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;shareData 只是用来存储公共数据 包括3个常量和2个方法:&lt;br&gt;saveShareData 用来把值存到指定 GroupId 的 NSUserDefaults 中&lt;br&gt;getShareData 从指定 GroupId 的 NSUserDefaults 中取值  &lt;/p&gt;
&lt;p&gt;ok Container app 介绍完毕.下一步&lt;br&gt;添加一个 extension 的 Target 名称是 testEExtension&lt;/p&gt;
&lt;h2 id=&quot;配置证书&quot;&gt;&lt;a href=&quot;#配置证书&quot; class=&quot;headerlink&quot; title=&quot;配置证书&quot;&gt;&lt;/a&gt;配置证书&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;配置证书.png&quot; alt=&quot;配置证书&quot;&gt;&lt;br&gt;首先得要在 iTunes Connect 里配置 证书文件的 groupId 例如: group.com.hujiang.demo&lt;br&gt;注意,必须要以 group 开头&lt;/p&gt;
&lt;h2 id=&quot;开启-App-Group&quot;&gt;&lt;a href=&quot;#开启-App-Group&quot; class=&quot;headerlink&quot; title=&quot;开启 App Group&quot;&gt;&lt;/a&gt;开启 App Group&lt;/h2&gt;&lt;p&gt;在Xcode中 分别为container 和 extension 的Target   Target —&amp;gt; Capabilities&lt;br&gt;开启 app group 功能&lt;br&gt;开启好之后 工程里会有 两个entitlements 文件 &lt;/p&gt;
&lt;h2 id=&quot;修改info-Plist文件&quot;&gt;&lt;a href=&quot;#修改info-Plist文件&quot; class=&quot;headerlink&quot; title=&quot;修改info.Plist文件&quot;&gt;&lt;/a&gt;修改info.Plist文件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;plist.png&quot; alt=&quot;plist.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;####先说明一下这个Plist中 NSExtension下的几个字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSExtensionAttributes 表明是那一种类型的 extension&lt;/li&gt;
&lt;li&gt;NSExtensionPrincipalClass  使用代码时 ViewControlle r的名称 &lt;/li&gt;
&lt;li&gt;NSExtensionMainStoryboard 使用 storyboard storyboard 文件名,默认是MainInterface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不使用 storyboard 就一定要指定 NSExtensionPrincipalClass&lt;br&gt;删除 NSExtensionMainStoryboard,然后添加 NSExtensionPrincipalClass&lt;br&gt;使用你的新ViewController的名字 &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这里我们不使用 Storyboard 我们用自定义的 TodayViewController 作为主界面.&lt;br&gt;首先删除 NSExtensionMainStoryboard字段 ,添加 NSExtensionPrincipalClass 字段,设置 NSExtensionPrincipalClass 的 value 为 TodayViewController.&lt;/p&gt;
&lt;h2 id=&quot;TodayViewController-的实现&quot;&gt;&lt;a href=&quot;#TodayViewController-的实现&quot; class=&quot;headerlink&quot; title=&quot;TodayViewController 的实现&quot;&gt;&lt;/a&gt;TodayViewController 的实现&lt;/h2&gt;&lt;p&gt;首先在 TodayViewController里添加一个 button&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var button: UIButton!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在 viewDidLoad 里面&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button = &lt;span class=&quot;type&quot;&gt;UIButton&lt;/span&gt;(type: .&lt;span class=&quot;type&quot;&gt;Custom&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.frame = &lt;span class=&quot;type&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;, forState: .&lt;span class=&quot;type&quot;&gt;Normal&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.addTarget(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;&quot;openAction:&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forControlEvents: .&lt;span class=&quot;type&quot;&gt;TouchUpInside&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.addSubview(button)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.preferredContentSize = &lt;span class=&quot;type&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 self.preferredContentSize是控制显示这个 extension 的高度为300&lt;/p&gt;
&lt;p&gt;在viewWillAppear里显示存储的值&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(animated: Bool)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewWillAppear(animated)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    button.setTitle(&lt;span class=&quot;type&quot;&gt;ShareData&lt;/span&gt;.getShareData(), forState: .&lt;span class=&quot;type&quot;&gt;Normal&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;必须把ShareData 添加到 extension的Target 里面&lt;/p&gt;
 &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;openAction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sender: AnyObject?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; url = &lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt;(string: &lt;span class=&quot;type&quot;&gt;ShareData&lt;/span&gt;.scheme + &lt;span class=&quot;string&quot;&gt;&quot;com.123&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.extensionContext?.openURL(url!, completionHandler: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行 你会得到&lt;/p&gt;
&lt;h2 id=&quot;一个错误&quot;&gt;&lt;a href=&quot;#一个错误&quot; class=&quot;headerlink&quot; title=&quot;一个错误&quot;&gt;&lt;/a&gt;一个错误&lt;/h2&gt;&lt;p&gt;&amp;gt;&lt;br&gt;testEExtension[6048:147384] &lt;strong&gt;&lt;em&gt; Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘&lt;/em&gt;&lt;/strong&gt; setObjectForKey: object cannot be nil (key: &lt;__nsconcreteuuid 0x7f8ca0513420=&quot;&quot;&gt; 9DB046F6-C18B-44CC-9148-1860D9C35B8F)’&lt;/__nsconcreteuuid&gt;&lt;/p&gt;
&lt;h3 id=&quot;这个问题只在-swift里才有-解决方法是&quot;&gt;&lt;a href=&quot;#这个问题只在-swift里才有-解决方法是&quot; class=&quot;headerlink&quot; title=&quot;这个问题只在 swift里才有, 解决方法是:&quot;&gt;&lt;/a&gt;这个问题只在 swift里才有, 解决方法是:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在extension的 build setting 的Packaging 里的Defines Module 设置为 YES.&lt;/li&gt;
&lt;li&gt;在info.plist 的 NSExtensionPrincipalClass 前加上模块名 testEExtension.&lt;br&gt;然后编译运行 记得选中Extension 的target&lt;br&gt;最后的效果图:&lt;br&gt;&lt;img src=&quot;result.png&quot; alt=&quot;最后的效果图&quot;&gt;&lt;br&gt;点击 button 也可以打开 Contaier App .结束!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;  可以看到, 做一个 extension 还是很简单的 一起动手做一个吧!&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/NotificationCenter.html#//apple_ref/doc/uid/TP40014214-CH11-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;wangzz.github.io/blog/2014/06/23/wwdc2014zhi-app-extensionsxue-xi-bi-ji/&quot;&gt;App Extension编程指南 中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;onevcat.com/2014/08/notification-today-widget/&quot;&gt;WWDC2014之App Extensions学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.raywenderlich.com/83809/ios-8-today-extension-tutorial&quot;&gt;iOS 8 Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;onevcat.com/2014/08/notification-today-widget/&quot;&gt;WWDC 2014 Session笔记 - iOS 通知中心扩展制作入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.cocoachina.com/ios/20140904/9527.html&quot;&gt;App Extension编程指南（iOS8/OS X v10.10）：扩展类型–Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.raywenderlich.com/83809/ios-8-today-extension-tutorial&quot;&gt;iOS 8 Today Extension Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;code.tutsplus.com/tutorials/ios-8-creating-a-today-widget--cms-22379&quot;&gt;iOS 8: Creating a Today Widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.cocoachina.com/industry/20140522/8514.html&quot;&gt;自定义 URL Scheme 完全指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;blog.sina.com.cn/s/blog_407fb5bc01013v6s.html&quot;&gt;iOS Framework制作全攻略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20140904/9527.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20140904/9527.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.toptal.com/ios/ios-8-app-extensions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.toptal.com/ios/ios-8-app-extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/AppExtensions.html#//apple_ref/doc/uid/TP40006556-CH67-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/AppExtensions.html#//apple_ref/doc/uid/TP40006556-CH67-SW1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文重点介绍Today Extension的机制，并通过一个Demo讲解整个实现过程。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS技术周刊第1期</title>
    <link href="http://yoursite.com/2016/02/28/ios-technology-magazine/"/>
    <id>http://yoursite.com/2016/02/28/ios-technology-magazine/</id>
    <published>2016-02-28T12:30:00.000Z</published>
    <updated>2016-03-06T11:16:39.000Z</updated>
    
    <content type="html">&lt;p&gt;本技术周刊旨在汇总每周的技术知识及行业动态，内容严格按照技术标签分类，望为每位iOS伙伴提供一些帮助，本篇涉及Swift，Hybrid, 性能优化等技术标签。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;沪江原创&quot;&gt;&lt;a href=&quot;#沪江原创&quot; class=&quot;headerlink&quot; title=&quot;沪江原创&quot;&gt;&lt;/a&gt;沪江原创&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hujiangtechnology.github.io/2016/03/01/swift-today-extension-practice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;探索Today Extension的奥秘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hujiangtechnology.github.io/2016/02/27/tech-tags-study/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 技术标签知识范围及学习资源整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Swift&quot;&gt;&lt;a href=&quot;#Swift&quot; class=&quot;headerlink&quot; title=&quot;Swift&quot;&gt;&lt;/a&gt;Swift&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@ryanolsonk/is-apple-using-swift-4a6c80f74599#.m9wr5tr7k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is Apple Using Swift in iOS ?&lt;/a&gt;  目前看来仅Calculator采用Pure Swift，任重道远&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Increasing Performance by Reducing Dynamic Dispatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;@Swift大会1月10号在北京召开，大会资源如下：&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atConf/atswift-2016-resources&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/video/11118&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://swift.gg/2016/02/01/protocol-oriented-segue-identifiers-swift/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Swift 的面向协议编程定义 Segue 标识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.swift.org/projects/SR/issues/SR-581?filter=allopenissues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 也用 Jira 来管理Bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hybrid&quot;&gt;&lt;a href=&quot;#Hybrid&quot; class=&quot;headerlink&quot; title=&quot;Hybrid&quot;&gt;&lt;/a&gt;Hybrid&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Chrome App 48.0.2564.87 版本开始使用WKWebView，&lt;a href=&quot;https://appsto.re/cn/NVp8F.i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://appsto.re/cn/NVp8F.i&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/sWYf0noAplM?from=page_100505_profile&amp;amp;wvr=6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极致的Hybrid-Con2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;疑难杂症&quot;&gt;&lt;a href=&quot;#疑难杂症&quot; class=&quot;headerlink&quot; title=&quot;疑难杂症&quot;&gt;&lt;/a&gt;疑难杂症&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当 iPhone 的应用跑在 iPad iOS 8.0.2 上时，编译出 &lt;xibname&gt;~iphone.nib 这样的文件是无法识别的，会 Crash。&lt;a href=&quot;http://koze.hatenablog.jp/entry/2015/08/21/093000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://koze.hatenablog.jp/entry/2015/08/21/093000&lt;/a&gt; 这篇文章介绍到了，解决这样的问题需要关闭 Size Class&lt;/xibname&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;越狱破解&quot;&gt;&lt;a href=&quot;#越狱破解&quot; class=&quot;headerlink&quot; title=&quot;越狱破解&quot;&gt;&lt;/a&gt;越狱破解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;amp;mid=455373552&amp;amp;idx=1&amp;amp;sn=522bdeaa8a3a8a37423634f4e6ad0334&amp;amp;scene=23&amp;amp;srcid=0223kyi4SqD0Mu6UafGoaQ0T#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在非越狱手机上进行App Hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能优化&quot;&gt;&lt;a href=&quot;#性能优化&quot; class=&quot;headerlink&quot; title=&quot;性能优化&quot;&gt;&lt;/a&gt;性能优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;View复用&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/peter-iakovlev/telegram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Telegram iOS版本&lt;/a&gt;，复用各种View，alloc的view都先缓存一下&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pingguohe.net/2016/01/31/lazyscroll.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 高性能异构滚动视图构建方案 —— LazyScrollView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TencentOpen/GT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯性能测试开源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stepanhruda/dyld-image-loading-performance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动态库加载性能检测及解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Watch Dog强制杀掉App，短时间内线程数达到峰值&lt;ul&gt;
&lt;li&gt;​&lt;a href=&quot;http://stackoverflow.com/questions/25848441/app-shutdown-with-exc-resource-wakeups-exception-on-ios-8-gm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/25848441/app-shutdown-with-exc-resource-wakeups-exception-on-ios-8-gm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YYKit中有个方案可供参考：&lt;a href=&quot;https://github.com/ibireme/YYDispatchQueuePool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ibireme/YYDispatchQueuePool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;GitHub源码&quot;&gt;&lt;a href=&quot;#GitHub源码&quot; class=&quot;headerlink&quot; title=&quot;GitHub源码&quot;&gt;&lt;/a&gt;GitHub源码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;amp;mid=402123943&amp;amp;idx=1&amp;amp;sn=9de12e74c32510a245d6195836653d5f#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;告别“伪连接”！如何高效检测iOS中的真实连接状态&lt;/a&gt; . &lt;a href=&quot;https://github.com/dustturtle/RealReachability&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/dustturtle/RealReachability&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;A queue to keep and reusing objects. &lt;a href=&quot;https://github.com/acoomans/ACReuseQueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/acoomans/ACReuseQueue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Telegram iOS App. &lt;a href=&quot;https://github.com/peter-iakovlev/telegram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peter-iakovlev/telegram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CocoaPods 1.0.0.beta 4,  &lt;a href=&quot;http://blog.cocoapods.org/CocoaPods-1.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看1.0 更新记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alcatraz/Alcatraz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode插件管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;翻墙&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://shadowsocks.com/&lt;/a&gt;  这个翻墙软件，速度稳定，看YouTube上的视频720P极其流畅 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://do1.glbproxy.tk/html/ec/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;海豚畅游&lt;/a&gt;， 目前仅支持Chrome和Android&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;​戴尔（DELL）专业P2415Q 23.8英寸16:9宽屏 LED背光 4K液晶显示器，效果与Macbook非常一致&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/buunguyen/octotree/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Octotree&lt;/a&gt;， Code tree for GitHub and GitLab&lt;/li&gt;
&lt;li&gt;技术学习视频网站，须翻墙，&lt;a href=&quot;http://www.raywenderlich.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.raywenderlich.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/replica-web-developer-tool/id1068196306?l=en&amp;amp;mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Replica - Web Developer Tool&lt;/a&gt;，移动设备的Charles&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/poboke/Miku&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;程序员鼓励师&lt;/code&gt;的插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;后花园&quot;&gt;&lt;a href=&quot;#后花园&quot; class=&quot;headerlink&quot; title=&quot;后花园&quot;&gt;&lt;/a&gt;后花园&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Apple Pay来了 &lt;a href=&quot;https://developer.apple.com/apple-pay/get-started/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/apple-pay/get-started/cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;花生地铁WiFi_测试，可以在地铁里愉快地上网了&lt;/li&gt;
&lt;li&gt;神奇的iOS 9.2.1版本 &lt;a href=&quot;http://toutiao.com/i6252784551433601537/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://toutiao.com/i6252784551433601537/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://2016.qconbeijing.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016 QCon 北京主题招募中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;干货集中营， &lt;a href=&quot;http://gank.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://gank.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=403520625&amp;amp;idx=1&amp;amp;sn=c59f3944760a055ee7b6d1dda4431e0a&amp;amp;scene=23&amp;amp;srcid=0113zrH6MRCoo0NBX3AOOSDO#r&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于烂代码的那些事 － 为什么每个团队存在大量烂代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本技术周刊旨在汇总每周的技术知识及行业动态，内容严格按照技术标签分类，望为每位iOS伙伴提供一些帮助，本篇涉及Swift，Hybrid, 性能优化等技术标签。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS技术周刊" scheme="http://yoursite.com/tags/iOS%E6%8A%80%E6%9C%AF%E5%91%A8%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>iOS 技术标签的知识范围及学习资源</title>
    <link href="http://yoursite.com/2016/02/27/tech-tags-study/"/>
    <id>http://yoursite.com/2016/02/27/tech-tags-study/</id>
    <published>2016-02-27T11:30:00.000Z</published>
    <updated>2016-03-05T10:22:49.000Z</updated>
    
    <content type="html">&lt;p&gt;本文旨在为每个技术标签的进阶提供一些参考，Hybrid，Swift，性能优化，设计模式，页面布局，本地数据存储，网络交互，音视频等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Hybrid&quot;&gt;&lt;a href=&quot;#Hybrid&quot; class=&quot;headerlink&quot; title=&quot;Hybrid&quot;&gt;&lt;/a&gt;Hybrid&lt;/h2&gt;&lt;h3 id=&quot;初级&quot;&gt;&lt;a href=&quot;#初级&quot; class=&quot;headerlink&quot; title=&quot;初级&quot;&gt;&lt;/a&gt;初级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握&lt;code&gt;UIWebView&lt;/code&gt; 的使用&lt;/li&gt;
&lt;li&gt;熟练掌握&lt;code&gt;UIWebView&lt;/code&gt;和&lt;code&gt;HTML&lt;/code&gt;页面的交互，包括&lt;code&gt;拦截请求&lt;/code&gt;以及&lt;code&gt;JavascriptCore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;熟练掌握譬如 &lt;strong&gt;Charles&lt;/strong&gt; 等抓包工具的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;中级&quot;&gt;&lt;a href=&quot;#中级&quot; class=&quot;headerlink&quot; title=&quot;中级&quot;&gt;&lt;/a&gt;中级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握&lt;code&gt;WKWebView&lt;/code&gt;的使用，掌握其与&lt;code&gt;UIWebView&lt;/code&gt;的不同之处&lt;/li&gt;
&lt;li&gt;熟悉整个&lt;code&gt;HTML&lt;/code&gt;页面的加载流程，熟知常见的&lt;code&gt;DOM&lt;/code&gt;元素以及相关事件&lt;/li&gt;
&lt;li&gt;熟练使用 &lt;strong&gt;Safari&lt;/strong&gt; 对内嵌页面进行调试，掌握基本的&lt;code&gt;Javascript&lt;/code&gt;书写&lt;/li&gt;
&lt;li&gt;了解&lt;code&gt;Javascript&lt;/code&gt;跨域安全问题，掌握&lt;code&gt;NSURLCache&lt;/code&gt;、&lt;code&gt;NSURLProtocol&lt;/code&gt;的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;高级&quot;&gt;&lt;a href=&quot;#高级&quot; class=&quot;headerlink&quot; title=&quot;高级&quot;&gt;&lt;/a&gt;高级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握&lt;code&gt;Javascript&lt;/code&gt;以及&lt;code&gt;HTML5&lt;/code&gt;特性，可独立完成一套完整的&lt;code&gt;HTML5&lt;/code&gt;页面&lt;/li&gt;
&lt;li&gt;阅读&lt;code&gt;WebKit&lt;/code&gt;以及&lt;code&gt;JavascriptCore&lt;/code&gt;源码，了解它们的核心逻辑&lt;/li&gt;
&lt;li&gt;熟悉&lt;code&gt;HTTP&lt;/code&gt;协议，以及基于&lt;code&gt;HTTP&lt;/code&gt;的通讯协议，如&lt;code&gt;Soap&lt;/code&gt;、&lt;code&gt;XMLRPC&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;熟悉 &lt;strong&gt;Web服务器&lt;/strong&gt; 的基本工作原理，可在应用内内嵌，如&lt;code&gt;GCDWebServer&lt;/code&gt;、&lt;code&gt;CocoaHTTPServer&lt;/code&gt;等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源&quot;&gt;&lt;a href=&quot;#学习资源&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Apple 开发文档&lt;/li&gt;
&lt;li&gt;W3School：&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3school.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML5中国：&lt;a href=&quot;http://www.html5cn.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5cn.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP协议详解：&lt;a href=&quot;http://blog.csdn.net/gueter/article/details/1524447&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gueter/article/details/1524447&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCDWebServer：&lt;a href=&quot;https://github.com/swisspol/GCDWebServer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/swisspol/GCDWebServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CocoaHTTPServer：&lt;a href=&quot;https://github.com/robbiehanson/CocoaHTTPServer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/robbiehanson/CocoaHTTPServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=401883911&amp;amp;idx=1&amp;amp;sn=938df448000d3c193a146c4f41b36f6c&amp;amp;scene=23&amp;amp;srcid=02239yd9HOhP7shWCE0LP0cH#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;Ehttp://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;amp;mid=400011053&amp;amp;idx=1&amp;amp;sn=81ed095f6fb9f7a4345ff50285264be1&amp;amp;scene=23&amp;amp;srcid=0223rWbN9Rk4GDeBuI78JmGC#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React-Native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Swift&quot;&gt;&lt;a href=&quot;#Swift&quot; class=&quot;headerlink&quot; title=&quot;Swift&quot;&gt;&lt;/a&gt;Swift&lt;/h2&gt;&lt;h3 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练基本语法&lt;/li&gt;
&lt;li&gt;熟练OC混编能力&lt;/li&gt;
&lt;li&gt;了解函数式编程范式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;进阶&quot;&gt;&lt;a href=&quot;#进阶&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握Swift高级用法&lt;/li&gt;
&lt;li&gt;深入剖析Swift源码&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源-1&quot;&gt;&lt;a href=&quot;#学习资源-1&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Swift Programming Language(Swift 2.1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Swift/Conceptual/BuildingCocoaApps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Swift with Cocoa and Objective-C (Swift 2.1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://swift.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://swift.gg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift翻译组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveCocoa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能优化&quot;&gt;&lt;a href=&quot;#性能优化&quot; class=&quot;headerlink&quot; title=&quot;性能优化&quot;&gt;&lt;/a&gt;性能优化&lt;/h2&gt;&lt;h3 id=&quot;入门-1&quot;&gt;&lt;a href=&quot;#入门-1&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟悉Instruments基本使用，内存泄漏监测&lt;/li&gt;
&lt;li&gt;了解FPS，图层绘制基本原理&lt;/li&gt;
&lt;li&gt;了解App的加载及运行机制&lt;/li&gt;
&lt;li&gt;了解内存分配机制&lt;/li&gt;
&lt;li&gt;了解多线程机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;进阶-1&quot;&gt;&lt;a href=&quot;#进阶-1&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握Instruments各类分析工具&lt;/li&gt;
&lt;li&gt;熟练掌握FPS，内存，线程等运行机制&lt;/li&gt;
&lt;li&gt;深入DTrace细节&lt;/li&gt;
&lt;li&gt;自动化性能测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源-2&quot;&gt;&lt;a href=&quot;#学习资源-2&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.solarisinternals.com/wiki/index.php/DTrace_Topics_Intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DTrace 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/watchos/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tapwork/HeapInspector-for-iOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试定位内存泄露&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FPS提升-AsyncDisplayKit: &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/AsyncDisplayKit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github 源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com/86365/asyncdisplaykit-tutorial-achieving-60-fps-scrolling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;h3 id=&quot;初级-1&quot;&gt;&lt;a href=&quot;#初级-1&quot; class=&quot;headerlink&quot; title=&quot;初级&quot;&gt;&lt;/a&gt;初级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;深入理解面向对象设计，并理解与编程范式之间的区别&lt;/li&gt;
&lt;li&gt;熟练掌握面向对象的基本设计原则（&lt;em&gt;SOLID&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;熟悉&lt;code&gt;GoF&lt;/code&gt;的23种面向对象设计模式&lt;/li&gt;
&lt;li&gt;熟悉一些辅助设计的框架，包括&lt;code&gt;AOP&lt;/code&gt;、&lt;code&gt;IoC&lt;/code&gt;等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;中级-1&quot;&gt;&lt;a href=&quot;#中级-1&quot; class=&quot;headerlink&quot; title=&quot;中级&quot;&gt;&lt;/a&gt;中级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟练掌握常见的一些架构模式，如&lt;code&gt;MVC&lt;/code&gt;、&lt;code&gt;MVP&lt;/code&gt;、&lt;code&gt;MVVM&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;熟练掌握分层架构（&lt;em&gt;常见的三层架构、N层架构等&lt;/em&gt;），以及分层的基本原则&lt;/li&gt;
&lt;li&gt;熟悉常见的软件体系结构风格，包括 &lt;strong&gt;管道-过滤器式&lt;/strong&gt;、&lt;strong&gt;层次式&lt;/strong&gt;、&lt;strong&gt;面向对象式&lt;/strong&gt;，以及它们之间的区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;高级-1&quot;&gt;&lt;a href=&quot;#高级-1&quot; class=&quot;headerlink&quot; title=&quot;高级&quot;&gt;&lt;/a&gt;高级&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟悉常见的软件开发模式，包括敏捷、瀑布、迭代等，包括常见的&lt;code&gt;XP&lt;/code&gt;、&lt;code&gt;SCRUM&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;熟悉常见的软件设计方式，包括 &lt;strong&gt;领域驱动设计&lt;/strong&gt;、&lt;strong&gt;模型\数据驱动设计&lt;/strong&gt;、&lt;strong&gt;测试驱动设计&lt;/strong&gt; 等&lt;/li&gt;
&lt;li&gt;熟悉企业级应用的架构模型，包括 &lt;strong&gt;分布式&lt;/strong&gt;、&lt;strong&gt;负载均衡&lt;/strong&gt; 等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源-3&quot;&gt;&lt;a href=&quot;#学习资源-3&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;面向对象设计原则：&lt;a href=&quot;http://www.cnblogs.com/feipeng/archive/2007/03/02/661840.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/feipeng/archive/2007/03/02/661840.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;23种设计模式：&lt;a href=&quot;http://blog.csdn.net/longyulu/article/details/9159589&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/longyulu/article/details/9159589&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分层架构设计原则：&lt;a href=&quot;http://www.cnblogs.com/chencheng/archive/2012/07/05/2575406.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/chencheng/archive/2012/07/05/2575406.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;领域驱动设计：&lt;a href=&quot;http://www.cnblogs.com/xishuai/category/572887.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/xishuai/category/572887.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;书籍:《敏捷软件开发：原则、模式与实践》&lt;/li&gt;
&lt;li&gt;博客：&lt;a href=&quot;http://casatwy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://casatwy.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;页面布局&quot;&gt;&lt;a href=&quot;#页面布局&quot; class=&quot;headerlink&quot; title=&quot;页面布局&quot;&gt;&lt;/a&gt;页面布局&lt;/h2&gt;&lt;h3 id=&quot;入门-2&quot;&gt;&lt;a href=&quot;#入门-2&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟悉Xib, Storyboard工具&lt;/li&gt;
&lt;li&gt;熟悉Autolayout，SizeClass，UIStackView，CGRect等布局方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;进阶-2&quot;&gt;&lt;a href=&quot;#进阶-2&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;iOS 多设备的布局优化&lt;/li&gt;
&lt;li&gt;深入理解布局相关的源码与机制&lt;/li&gt;
&lt;li&gt;多类布局方式的最佳实践&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源-4&quot;&gt;&lt;a href=&quot;#学习资源-4&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;像素是如何绘制到屏幕上的: &lt;a href=&quot;http://objccn.io/issue-3-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://objccn.io/issue-3-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;页面布局，页面渲染的原理: &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW14&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AutoLayout: &lt;a href=&quot;http://www.cocoachina.com/ios/20151021/13825.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cocoachina.com/ios/20151021/13825.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SizeClass&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.callmewhy.com/2014/09/12/learn-ios8-size-class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.callmewhy.com/2014/09/12/learn-ios8-size-class/&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://onevcat.com/2014/07/ios-ui-unique/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://onevcat.com/2014/07/ios-ui-unique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UIView及其扩展接口深入理解 &lt;a href=&quot;http://my.oschina.net/w11h22j33/blog/208574?fromerr=4ylkDitz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/w11h22j33/blog/208574?fromerr=4ylkDitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MASConstraint   &lt;a href=&quot;https://github.com/SnapKit/Masonry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SnapKit/Masonry&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;本地数据存储&quot;&gt;&lt;a href=&quot;#本地数据存储&quot; class=&quot;headerlink&quot; title=&quot;本地数据存储&quot;&gt;&lt;/a&gt;本地数据存储&lt;/h2&gt;&lt;h3 id=&quot;入门-3&quot;&gt;&lt;a href=&quot;#入门-3&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;熟悉各类本地数据存储，SQLite(FMDB)，CoreData，UserDefaults&lt;/li&gt;
&lt;li&gt;熟悉SQL基本语法&lt;/li&gt;
&lt;li&gt;了解NOSQL基本原理，并熟悉YapDatabase, Realm等&lt;/li&gt;
&lt;li&gt;熟练使用数据库查看工具SQLite Professional&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;进阶-3&quot;&gt;&lt;a href=&quot;#进阶-3&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最佳实践&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;学习资源-5&quot;&gt;&lt;a href=&quot;#学习资源-5&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlite.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLite 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CoreData&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/watchos/documentation/Cocoa/Conceptual/CoreData/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Data Programming Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/6739319&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;框架详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/6746117&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手动编写代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/6757279&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用绑定1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/6757412&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用绑定2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Realm&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://realm.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/052c763d5693&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基础教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;源码&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChrislosChen/ANKeyValue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ChrislosChen/ANKeyValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yapstudios/YapDatabase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yapstudios/YapDatabase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ccgus/fmdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marcoarment/FCModel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/marcoarment/FCModel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网络交互&quot;&gt;&lt;a href=&quot;#网络交互&quot; class=&quot;headerlink&quot; title=&quot;网络交互&quot;&gt;&lt;/a&gt;网络交互&lt;/h2&gt;&lt;h3 id=&quot;知识范围&quot;&gt;&lt;a href=&quot;#知识范围&quot; class=&quot;headerlink&quot; title=&quot;知识范围&quot;&gt;&lt;/a&gt;知识范围&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;BSD Socket&lt;/li&gt;
&lt;li&gt;CFNetwork&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;li&gt;HTTP / TCP 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;学习资源-6&quot;&gt;&lt;a href=&quot;#学习资源-6&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/ParseSourceCodeStudy/tree/master/02_Parse%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BC%93%E5%AD%98%E4%B8%8E%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网络缓存与离线存储&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/8801156&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFNetwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/8798039&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/kesalin/article/details/8867781&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 网络层设计方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;音视频&quot;&gt;&lt;a href=&quot;#音视频&quot; class=&quot;headerlink&quot; title=&quot;音视频&quot;&gt;&lt;/a&gt;音视频&lt;/h2&gt;&lt;h3 id=&quot;学习资源-7&quot;&gt;&lt;a href=&quot;#学习资源-7&quot; class=&quot;headerlink&quot; title=&quot;学习资源&quot;&gt;&lt;/a&gt;学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;《Learning-AV-Foundation》 &lt;a href=&quot;http://www.amazon.com/Learning-Foundation-Hands-Mastering-Framework/dp/0321961803&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.amazon.com/Learning-Foundation-Hands-Mastering-Framework/dp/0321961803&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/av-foundation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/av-foundation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在为每个技术标签的进阶提供一些参考，Hybrid，Swift，性能优化，设计模式，页面布局，本地数据存储，网络交互，音视频等。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>带你领略 Swift 的风骚</title>
    <link href="http://yoursite.com/2016/02/24/take-you-to-learn-swift-feng-sao/"/>
    <id>http://yoursite.com/2016/02/24/take-you-to-learn-swift-feng-sao/</id>
    <published>2016-02-24T08:26:13.000Z</published>
    <updated>2016-03-05T10:22:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;，已经出来一年多了，想必不少人都曾对它抱着观望的态度，如果现在的你还是这样的态度，那么是时候去改变了。作为一个年龄比我还大的语言————&lt;code&gt;Objective-C&lt;/code&gt;，是时候淡出历史的舞台了，有人说&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;会并存，但我觉得，短期内会这样，从长远的角度来看，并存的可能性并不大。毕竟，它们不是&lt;code&gt;C&lt;/code&gt;和&lt;code&gt;C++&lt;/code&gt;这样的关系，它们更像&lt;code&gt;Delphi&lt;/code&gt;与&lt;code&gt;C#&lt;/code&gt;这样的存在。从可维护的角度来说，并存的代价比较大，所以，对于&lt;code&gt;Objective-C&lt;/code&gt;，放手吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;作为一个绝对现代化的编程语言，Swift集合了当下众多流行语言的特性，这与保守的&lt;code&gt;Objective-C&lt;/code&gt;产生了鲜明的对比。如果你还在犹豫踌躇中，那么就让本文带你领略下新欢的风骚，这一切，你值得拥有！&lt;/p&gt;
&lt;h2 id=&quot;不得不说的简洁和优雅&quot;&gt;&lt;a href=&quot;#不得不说的简洁和优雅&quot; class=&quot;headerlink&quot; title=&quot;不得不说的简洁和优雅&quot;&gt;&lt;/a&gt;不得不说的简洁和优雅&lt;/h2&gt;&lt;p&gt;谈到Swift，不得不把它的优雅放在第一位，作为一门现代化的编程语言，优雅是它必备的特质，那么什么是&lt;strong&gt;优雅&lt;/strong&gt;？所谓优雅就是在书写或阅读时，有种简单自然、一气呵成的感觉，不罗嗦、不做作，这是语法上的优雅，而设计中的优雅，又何尝不是这样？&lt;/p&gt;
&lt;h3 id=&quot;声明和实现的合并&quot;&gt;&lt;a href=&quot;#声明和实现的合并&quot; class=&quot;headerlink&quot; title=&quot;声明和实现的合并&quot;&gt;&lt;/a&gt;声明和实现的合并&lt;/h3&gt;&lt;p&gt;这可能是Swift向现代化语言看齐的第一步，在很多传统的编程语言里，例如C++、Pascal、Objective-C，类或方法的声明与实现是分离开的。当然C++是可以在头文件里直接实现内联方法，但这很不自然，也不安全，因为它会暴露给最终用户。&lt;/p&gt;
&lt;p&gt;以往声明和实现的分离，其实更像是&lt;code&gt;接口定义&lt;/code&gt;与&lt;code&gt;接口实现&lt;/code&gt;，但这种强制性的设定给使用者也会带来一些麻烦。就拿Objective-C来说，如果我要定义一个私有类，则会写在“.m”文件中，但这时候又不得不将声明也书写一遍，这是没有太多意义的；又比如，我一个简单到只有属性的&lt;code&gt;PONSO&lt;/code&gt;，还不得不将一个空的实现书写一遍（&lt;em&gt;请抛开自动属性这些用户不需要知道的细节&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;任何一门现代化的编程语言，都摈弃了这种分离的方式，其原因是为了追求更加的简洁和优雅。而在这种合并的方式下，也迫使我们不会将一个类写得特别庞大，以前的团队合作中，大家只会看你的头文件，而现在，更多的是看你具体的代码实现了（&lt;em&gt;无疑，这也是一种Code Review&lt;/em&gt;）。&lt;/p&gt;
&lt;h3 id=&quot;扩展（Extension）&quot;&gt;&lt;a href=&quot;#扩展（Extension）&quot; class=&quot;headerlink&quot; title=&quot;扩展（Extension）&quot;&gt;&lt;/a&gt;扩展（Extension）&lt;/h3&gt;&lt;p&gt;扩展，这也是Swift中非常有特色的设计，也是苹果编程语言的一贯传承。Swift中的扩展，其实是对Objective-C中&lt;code&gt;Category&lt;/code&gt;和&lt;code&gt;Extension&lt;/code&gt;的合并，在Objective-C中，我们会书写类似下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OCObject&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OCObject&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Category&lt;/span&gt;) &amp;lt;&lt;span class=&quot;title&quot;&gt;NSCoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对比Swift，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftObject&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftObject&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSCoding&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;扩展主要可应用于以下场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对原有类增加新协议适配，新方法&lt;/li&gt;
&lt;li&gt;对实现代码按逻辑块进行划分（&lt;em&gt;比如按实现的协议划分&lt;/em&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在我所接触的其它语言里，也有扩展一说，比如C#，但C#的扩展其实完全只是语法糖，而Objective-C或Swift中的扩展，并不仅仅是语法上的便利，更有运行时的支持，考虑下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftClass&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftClass&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;SwiftProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; swiftObject = &lt;span class=&quot;type&quot;&gt;SwiftClass&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(swiftObject &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SwiftProtocol&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// print: true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不得不说，扩展对代码的优雅性上，也给出了不少的支援，相比于一个实现了N多协议的类，我们用&lt;code&gt;extension&lt;/code&gt;进行划分会清晰很多。&lt;/p&gt;
&lt;h3 id=&quot;可选类型和可选链&quot;&gt;&lt;a href=&quot;#可选类型和可选链&quot; class=&quot;headerlink&quot; title=&quot;可选类型和可选链&quot;&gt;&lt;/a&gt;可选类型和可选链&lt;/h3&gt;&lt;p&gt;可选类型，也就是在一个类型的定以后，增加一个&lt;code&gt;?&lt;/code&gt;号，代表这个变量可以为&lt;code&gt;nil&lt;/code&gt;。这也是Swift相对于Objective-C的一个重大改进，使得代码更加安全，表述性更强。但，需要注意的是，这并不是Swifit特有的，在.Net平台中，可选类型也是非常常见的。对于以下的Objective-C代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)userAddress:(HJUser *)user &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (user == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (user.city == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (user.street == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@%@&quot;&lt;/span&gt;, user.city, user.street];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从使用者的角度来说，我们必须要判断返回值，因为我们根本不确定是否会返回&lt;code&gt;nil&lt;/code&gt;；而从设计者的角度来说，我们也很头疼，我们也不知道调皮的用户到底会给我们传入什么。而&lt;code&gt;__nonnull&lt;/code&gt;这样的标示，根本就无法阻止这样的行为：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * __nonnull)test:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * __nonnull)arg &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码在Xcode 7 beta2中编译，没有任何错误和警告。想一想上面的那段&lt;code&gt;userAddress&lt;/code&gt;代码，其实我们很确定，如果传入的参数为空或者其属性为空，则返回值肯定为空；而对方法的设计而言，参数为空是没有任何意义的，我们应该让使用者保证他传入的参数是不能为&lt;code&gt;nil&lt;/code&gt;的，而不是在两端都对&lt;code&gt;nil&lt;/code&gt;进行判定，这无疑增加了复杂度（&lt;em&gt;三个方面：设计、使用、调试&lt;/em&gt;），也不合理。所以，在Swift中对其进行改善：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUserAddress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user: HJUser)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user.city + user.street&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以安全的调用上面的方法，并不需要多余的&lt;code&gt;nil&lt;/code&gt;判断，那么可选类型应该应用于什么场景呢？&lt;strong&gt;可选类型，应该应用于某个变量、参数或返回值，存在空或非空两种合理的状态下&lt;/strong&gt;。也就是说它可以为空，也可以不为空，并且，从逻辑的角度考虑很合理。比如，下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;HJUser&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果找到了则返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 否则返回nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从逻辑的角度考虑，我们查找数据，有两种结果：找到和没有找到，这样的场景下就特别适合使用可选类型。那么配合可选链，我们的代码会非常简洁和优雅：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findUserRealName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; findUser(username)?.info?.realName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式匹配（Patterns）&quot;&gt;&lt;a href=&quot;#模式匹配（Patterns）&quot; class=&quot;headerlink&quot; title=&quot;模式匹配（Patterns）&quot;&gt;&lt;/a&gt;模式匹配（Patterns）&lt;/h3&gt;&lt;p&gt;模式匹配，是函数式编程里非常常见的一个特性，这也和语言的优雅性息息相关，在Swift中，大概有以下几种模式匹配：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通配符（Wildcard Pattern）&lt;/li&gt;
&lt;li&gt;标识符（Identifier Pattern）&lt;/li&gt;
&lt;li&gt;值绑定（Value-Binding Pattern）&lt;/li&gt;
&lt;li&gt;元组（Tuple Pattern）&lt;/li&gt;
&lt;li&gt;枚举（Enumeration Case Pattern）&lt;/li&gt;
&lt;li&gt;可选（Optional Pattern）&lt;/li&gt;
&lt;li&gt;类型转换（Type-Casting Pattern）&lt;/li&gt;
&lt;li&gt;表达式（Expression Pattern）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于模式匹配，下面的代码进行了很好的阐述：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Identifier Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; points: [(&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)?] = [(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; p) = points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// Enumeration Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; p = points[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;#123; &lt;span class=&quot;comment&quot;&gt;// Identifier Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; point? &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; points &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// Optional Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) = point  &lt;span class=&quot;comment&quot;&gt;// Tuple Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; point &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;):        &lt;span class=&quot;comment&quot;&gt;// Expression Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0, 0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y):    &lt;span class=&quot;comment&quot;&gt;// Value-Binding Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;:             &lt;span class=&quot;comment&quot;&gt;// Wildcard Pattern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Wildcard Pattern&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于模式匹配的深入理解，有助于对Swift的阅读，也有助于编写出更加简洁优雅的代码。anyway，只要记住，&lt;strong&gt;模式匹配是一种类似于正则表达式的捕获规则&lt;/strong&gt;，比如通配符&lt;code&gt;_&lt;/code&gt;可以捕获任何值，&lt;code&gt;(x, y)&lt;/code&gt;只能捕获二元组，&lt;code&gt;(0, y)&lt;/code&gt;只能匹配以0为第一元的二元组，可选和枚举也类似。从抽象的角度来说，所有的模式匹配，都有以下特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要有一个输入与之进行匹配测试&lt;/li&gt;
&lt;li&gt;匹配结果有两种：成功或失败&lt;/li&gt;
&lt;li&gt;匹配成功时，可捕获所匹配到的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s cool！感受下，如果没有这些便捷的模式匹配，用传统的条件分支语句，会写成怎样？&lt;/p&gt;
&lt;h3 id=&quot;闭包（Closure）&quot;&gt;&lt;a href=&quot;#闭包（Closure）&quot; class=&quot;headerlink&quot; title=&quot;闭包（Closure）&quot;&gt;&lt;/a&gt;闭包（Closure）&lt;/h3&gt;&lt;p&gt;没有闭包的编程语言，就不能称之为函数式编程语言，我们来看看百度百科对闭包的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是可以包含自由（&lt;em&gt;未绑定到特定对象&lt;/em&gt;）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（&lt;em&gt;局部变量&lt;/em&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Objective-C中也有闭包，也就是&lt;code&gt;block&lt;/code&gt;，但就语法的反人类程度就已经很令人发指了，更别说和函数指针定义在一起时，是多么令人奔溃了。也就是说&lt;code&gt;block&lt;/code&gt;的设计并不简洁、优雅，这点在Swift中有了很好的改进，Swift中，已直接将它称之为&lt;strong&gt;闭包&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url: String, response:&lt;span class=&quot;params&quot;&gt;(String)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Swift中，闭包的定义其实可以抽象成&lt;code&gt;() -&amp;gt; ()&lt;/code&gt;这样的通用模式，也就是一个输入&lt;strong&gt;推导出&lt;/strong&gt;一个输出，这是非常直观的定义方式，也更贴近其它编程语言中闭包的定义方式（&lt;em&gt;C#，Java8中的Lambda表达式&lt;/em&gt;）。而在Swift中，为了更加优雅，放置在参数最后的闭包使用时可以放置到参数括号外，闭包输入参数可以用&lt;code&gt;$0、$1...&lt;/code&gt;这样的方式来捕获，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sendRequest(&lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种闭包放置在参数括号外的特性，Swift将它称之为&lt;strong&gt;尾随闭包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在Swift中，和其它函数式编程语言一样，闭包更像是嵌套函数，或者称之为内部函数，Swift中所有的函数声明，都可以用闭包表达式来描述，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String, password: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用闭包表达式来描述：&lt;code&gt;(String, String) -&amp;gt; Bool&lt;/code&gt;，&lt;strong&gt;所有类型为闭包的参数，都可以用签名相同的函数来替代&lt;/strong&gt;，所以，先前的&lt;code&gt;sendRequest&lt;/code&gt;，可以直接如下使用：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sendRequest(&lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;, response: &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这便是&lt;strong&gt;函数式编程&lt;/strong&gt;的一个精髓所在，函数不仅可以被调用，还可以将其作为参数或返回值进行传递，这可能是和&lt;strong&gt;命令式编程&lt;/strong&gt;最大的区别了。&lt;/p&gt;
&lt;p&gt;另外在使用闭包时，由于它能捕获当前上下文中的变量，特别是对&lt;code&gt;self&lt;/code&gt;而言，这很容易导致循环引用。以往在Objective-C中的常见做法是定义一个&lt;code&gt;weak&lt;/code&gt;的&lt;code&gt;self&lt;/code&gt;，只使用那个&lt;code&gt;weak&lt;/code&gt;的&lt;code&gt;self&lt;/code&gt;，但这样依然会有出错的可能，这点在Swift中也进行了改良：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sendRequest(&lt;span class=&quot;string&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;) &amp;#123; [&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;] resp  -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种情况下，闭包内所有的&lt;code&gt;self&lt;/code&gt;都是&lt;code&gt;weak&lt;/code&gt;的，强制性的需要你进行&lt;code&gt;nil&lt;/code&gt;的判断。这样的设计，使得Swift更加安全和优雅。关于安全，这正是我们接下来需要探讨的内容！&lt;/p&gt;
&lt;h2 id=&quot;类型和类型安全&quot;&gt;&lt;a href=&quot;#类型和类型安全&quot; class=&quot;headerlink&quot; title=&quot;类型和类型安全&quot;&gt;&lt;/a&gt;类型和类型安全&lt;/h2&gt;&lt;p&gt;Objective-C是一个弱类型的语言，或者说是一个比较动态的语言，而Swift与之截然不同，Swift是一个名副其实的强类型语言。相比之下，弱类型的语言更加灵活，但更容易出错，而强类型的语言，描述性和约束性更强，也更加安全。&lt;/p&gt;
&lt;h3 id=&quot;类型推断&quot;&gt;&lt;a href=&quot;#类型推断&quot; class=&quot;headerlink&quot; title=&quot;类型推断&quot;&gt;&lt;/a&gt;类型推断&lt;/h3&gt;&lt;p&gt;类型推断是现代化编程语言的趋势，在&lt;code&gt;C#&lt;/code&gt;中引入了&lt;code&gt;var&lt;/code&gt;关键字，大大简化了方法和变量的定义。Swift中自然是拥有了类型推断的能力，没有类型推断的Objective-C代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OCObject *obj = [OCObject new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [obj test:&lt;span class=&quot;string&quot;&gt;@&quot;hello world&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于没有类型推断，变量定义时必须要定义它所属于的类型，方法的返回值也是类似。而从某种角度来说，其实通过等号右侧完全可以推断出左侧的类型，所以在Swift中，编译器会智能的做这样的推断，可以帮我们省略下很多代码的编写：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &lt;span class=&quot;type&quot;&gt;SwiftObject&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = obj.test(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，类型推断的好处远远不止这种形式，在泛型和闭包中，类型推断简直就是其设计的点睛之笔。而类型推断，也进一步的阐述了Swift是强类型语言，否则就不可能推断出所需类型，那么在Objective-C中常见的&lt;code&gt;unrecognized selector&lt;/code&gt; Crash，在纯粹的Swift中永远不会发生。&lt;/p&gt;
&lt;h3 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h3&gt;&lt;p&gt;值类型也是Swift中伟大的创举之一，值类型的一个显著特征便是在赋值和传递时会进行复制。为什么说Swift中值类型是一个创举呢？因为在我所经历的高级语言里，从未见过将字符串和框架内集合类型定义为值类型的，不得不说，Swift是第一个。&lt;/p&gt;
&lt;p&gt;选择值类型，往往是为了对象在多线程环境下更加安全，因为它&lt;code&gt;复制&lt;/code&gt;的特性，我们需要面对的只是单个实例对象，这使得我们对代码更加可控。另外，值类型中方法如果要修改成员变量，则必须使用&lt;code&gt;mutating&lt;/code&gt;修饰：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;withMutableCharacters&lt;/span&gt;&amp;lt;R&amp;gt;&lt;span class=&quot;params&quot;&gt;(body: &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; String.CharacterView)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会让我们在使用或设计时，更清楚值对象的变化原因，而外界对值对象的修改也是有很大限制，考虑下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestStruct&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; field1 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modifyStruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; st: TestStruct)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st.field1 = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; st = &lt;span class=&quot;type&quot;&gt;TestStruct&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modifyStruct(st)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(st.field1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为&lt;code&gt;3&lt;/code&gt;，为什么会这样？因为在进行参数传递的时候，函数体操作的只是&lt;code&gt;st&lt;/code&gt;的副本，&lt;code&gt;st&lt;/code&gt;在传递时进行了复制。所以，即便是将&lt;code&gt;var st = TestStruct()&lt;/code&gt;改为&lt;code&gt;let st = TestStruct()&lt;/code&gt;也不会有任何编译问题，这是完全合法的操作。如果的确要在函数内修改传入参数，则使用下面的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modifyStruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; st: TestStruct)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    st.field1 = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; st = &lt;span class=&quot;type&quot;&gt;TestStruct&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modifyStruct(&amp;amp;st)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这与很多编程语言中的参数传递方式是类似的，也就是两种：&lt;strong&gt;传引用&lt;/strong&gt;和&lt;strong&gt;传值&lt;/strong&gt;，默认情况下，Swift参数的传递都是“传值”的方式，这种情况下，引用类型会多出一个指向实例内存的指针，而值类型会进行复制（&lt;em&gt;可以说，指针就是值类型&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;了解了值类型与引用类型的本质区别，那么还有很多值得去尝试的地方，比如在值类型中定义引用类型的成员，那么在该值对象的副本上修改该引用成员，依然会影响到主体。具体实践就留给在座的各位了。&lt;/p&gt;
&lt;h3 id=&quot;枚举类型&quot;&gt;&lt;a href=&quot;#枚举类型&quot; class=&quot;headerlink&quot; title=&quot;枚举类型&quot;&gt;&lt;/a&gt;枚举类型&lt;/h3&gt;&lt;p&gt;在目前主流的编程语言中，枚举是非常常见的一种值类型，而大多数人对它的用法一直还停留在&lt;code&gt;C或C++&lt;/code&gt;的那种形式上。枚举是什么？顾名思义，&lt;strong&gt;枚举是一系列有限的状态集合&lt;/strong&gt;，那么涉及到状态时，我们会很自然的想到用枚举来表示。如果仅仅用来表示状态，那么枚举的使用范围就非常有限，但在实际的开发中，有很多时候，我们有些数据仅在某种状态下才具有意义，或者说，这种数据只能存在于特定状态中。比如我们做网络请求时，会有两种状态：&lt;strong&gt;成功&lt;/strong&gt;或&lt;strong&gt;失败&lt;/strong&gt;，而仅仅在失败时，&lt;strong&gt;错误消息&lt;/strong&gt;这个数据才有意义。那么这时候如果使用面向对象的思维来解决，我们可能需要定义一个通用的&lt;strong&gt;状态&lt;/strong&gt;基类，然后有两个子类来实现不同状态。但在Swift中，你有另外的选择，那就是&lt;strong&gt;枚举关联值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓枚举关联值，便是在枚举中的每一种状态下，都可以关联一些个数据。其实这种做法在Java中早就有了，但Java的枚举比起Swift的，还是有所不足的。我们先来看看Java的枚举：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Color &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED(&lt;span class=&quot;string&quot;&gt;&quot;红色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;string&quot;&gt;&quot;绿色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), BLANK(&lt;span class=&quot;string&quot;&gt;&quot;白色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLO(&lt;span class=&quot;string&quot;&gt;&quot;黄色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.index = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，Java的枚举的确也有关联值，但数量和数值都是固定死的，它也无法解决上面我们提到的那个问题。所以，还是看看Swift是怎样解决这样的问题吧：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ResponseStatus&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(errorMessage: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; status = &lt;span class=&quot;type&quot;&gt;ResponseStatus&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(errorMessage: &lt;span class=&quot;string&quot;&gt;&quot;网络连接中断&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 模式匹配中的 Enumeration Pattern 哦~&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; msg) = status &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; status &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; msg):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是很酷？相当酷！这样给我们减少了一些细小类的编写，并且更加合理和直观。除了关联值之外，枚举还可以有它自己的构造函数和方法，这会给我们在设计状态相关的逻辑时提供不少的便利。除此之外，枚举还是可以定义成泛型的，这样的灵活性给了我们更大的发挥空间，所以，我们再来看看泛型！&lt;/p&gt;
&lt;h3 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h3&gt;&lt;p&gt;泛型，这是多么激动人心的一个特性啊，不知道你是否和我一样对泛型抱有极高的期待。作为一个现代化的编程语言，怎么可以没有泛型呢？转入Objective-C之后，很多时候的设计，都卡在了泛型这块，使得我不得不多写出一些类来完成设计。虽然如今的Objective-C中加入了泛型，但依然没有达到我的预期，而Swift中的泛型，虽然还有些欠缺，却也已经是足够强大了。&lt;/p&gt;
&lt;p&gt;什么时候该用泛型呢？我总结如下：&lt;strong&gt;当某种逻辑，可应用于一系列有相似点的对象，为了确保拥有强类型的特性时，则需要使用泛型&lt;/strong&gt;。对于这句话的理解，需要进行一些深度分析的，很多时候其实我们并不需要泛型，使用基类即可满足。聚个例子吧，当我们进行一些图形绘制程序的设计时，一个图形元素的绘制可能会抽象出这样的接口：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GraphicElement&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(panel: GraphicPanel)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么在我们的绘图引擎中，绘制元素的方法应该如何定义？使用泛型么？这里其实并不适合使用泛型，因为我们没有必要保留强类型的特性，我们只关心&lt;code&gt;draw&lt;/code&gt;方法，所以使用基类即可：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(element: GraphicElement)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element.draw(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在某些情况下，我们需要使用强类型的特性，这会使得我们代码更加简洁和安全，这时候，我们就需要使用泛型。比如，在一个通用的消息过滤模块，我们需要对消息内容进行关键字过滤，那么过滤前和过滤后的消息类型应该是一致的，这时候，我们就需要保留强类型的特性，所以，要使用泛型：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; content: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(content: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.content = content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GroupMessage&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; groupId: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, content: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.groupId = id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(content: content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filterMessage&lt;/span&gt;&amp;lt;T: Message&amp;gt;&lt;span class=&quot;params&quot;&gt;(message: T)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... filter &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message = &lt;span class=&quot;type&quot;&gt;GroupMessage&lt;/span&gt;(id: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, content: &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;message  = filterMessage(message)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请时刻记住泛型的使用场景，避免没必要的泛型设计。在Swift中，目前泛型还是有欠缺的，少了&lt;code&gt;逆变&lt;/code&gt;和&lt;code&gt;协变&lt;/code&gt;的支持，而在某些场景下，这是必须的。相信在不久的将来，这个特性会被弥补上来的，毕竟，Objective-C中已经有了这样的支持，虽然不尽人意。&lt;/p&gt;
&lt;p&gt;逆变和协变，不仅体现在泛型上，在继承链中的方法覆写上，也有应用。而很多人对这样的概念仍是一知半解，甚至陷入了错误的认知，希望在这里可以帮助大家真正理解它的适用场景。最基本的概念如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逆变&lt;/strong&gt;：父类可以替代子类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协变&lt;/strong&gt;：子类可以替代父类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么会有这两种概念存在？其实最根本的原因还是为了类型安全，在&lt;code&gt;C#&lt;/code&gt;的语法设计中，对于数组默认是允许协变的，这样导致存在安全隐患，这也是&lt;code&gt;C#&lt;/code&gt;为数不多的设计缺陷之一。考虑下面的&lt;code&gt;C#&lt;/code&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Super &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Sub : Super &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void test() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void Main(string[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	var subs = new Sub[3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subs[0] = new Sub();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subs[1] = new Sub();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Super[] supers = subs;   // 协变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	supers[1] = new Super();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 这里会崩溃掉，抛出 ArrayTypeMismatchException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subs[1].test(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以说，这种设计是很糟糕的，因为它没有保证到类型的安全，我们明明声明的是一个&lt;code&gt;Sub&lt;/code&gt;的数组，里面却可以混入一个不是&lt;code&gt;Sub&lt;/code&gt;的类型，这便是&lt;strong&gt;协变的陷阱&lt;/strong&gt;，相同的问题在Objective-C和Java中同样存在（&lt;em&gt;Java中会抛出ArrayStoreException异常&lt;/em&gt;）。而在Swift中，如下的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subs = [&lt;span class=&quot;type&quot;&gt;Sub&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subs.append(&lt;span class=&quot;type&quot;&gt;Sub&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subs.append(&lt;span class=&quot;type&quot;&gt;Sub&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; supers: [&lt;span class=&quot;type&quot;&gt;Super&lt;/span&gt;] = subs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supers[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;Super&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].test()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的代码是不会出现任何问题的，因为在Swift中，&lt;code&gt;Array&lt;/code&gt;是值类型，&lt;code&gt;supers[1] = Super()&lt;/code&gt;只是对副本的修改，并不会影响到&lt;code&gt;subs&lt;/code&gt;。这样的协变特性，目前只有系统库能享有，我们自己定义泛型是无法做到的，但，从安全性的角度来说，值类型的泛型应该默认支持协变，这是没有任何副作用的。&lt;/p&gt;
&lt;p&gt;协变和逆变的另一个使用场景，便是方法参数和返回值的约束，&lt;strong&gt;参数和返回值应该是可协变的，而闭包中的参数应该是可逆变的&lt;/strong&gt;，请好好的理解我说的这句话，加以实践，你会明白这其间的道理。关于泛型，也就说到这里，更多内容还需大家自己去领悟，接下来，我们看看更多有意思的东西！&lt;/p&gt;
&lt;h3 id=&quot;元组类型&quot;&gt;&lt;a href=&quot;#元组类型&quot; class=&quot;headerlink&quot; title=&quot;元组类型&quot;&gt;&lt;/a&gt;元组类型&lt;/h3&gt;&lt;p&gt;似乎所有的函数式编程语言里都有元组类型，包括&lt;code&gt;C#&lt;/code&gt;这种命令式编程语言里也引入了元组，其实元组是很简单的东西，但在Swift中却尤为重要。&lt;strong&gt;元组类型可以看作是一种有序字典&lt;/strong&gt;，在编程语言中，所有的&lt;code&gt;Plain Object&lt;/code&gt;都是可以用字典来表示，只是使用起来不是很便利。而，元组是一种表现力更强，使用起来更方便的&lt;code&gt;Plain Object&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;什么时候适合使用元组？大体在下面几种情况下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多返回值的函数里&lt;/li&gt;
&lt;li&gt;用于临时的数据传输对象（&lt;em&gt;DTO&lt;/em&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutilReturn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; (&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tempDTO&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cellSummary: (id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, display: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cellSummary.id = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cellSummary.display = &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(cellSummary)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;元组在面对这种有意义但又很小的简单对象时非常有用，可以帮我们减少很多细小类的编写，&lt;strong&gt;需要注意的是，元组是值对象&lt;/strong&gt;，所以它拥有所有值对象的特性。另外，&lt;strong&gt;Swift中，所有的变量定义都是一个一元组&lt;/strong&gt;，可以通过下面的代码验证：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i2: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;566&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过下标访问元组项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i2.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种设计可以让元组类型和普通的值类型进行平滑过渡，所以&lt;code&gt;Type&lt;/code&gt;和&lt;code&gt;(Type)&lt;/code&gt;在Swift中是等同的，考虑下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Item&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; value: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 一元组数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array: [(&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;)] = [(&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)), (&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)),&lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i: Item)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(array[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码是没有任何问题的，所以，在Swift中，元组是一等公民，也可以说，只要你使用了Swift，你就已经在使用元组了。&lt;/p&gt;
&lt;h3 id=&quot;嵌套类型&quot;&gt;&lt;a href=&quot;#嵌套类型&quot; class=&quot;headerlink&quot; title=&quot;嵌套类型&quot;&gt;&lt;/a&gt;嵌套类型&lt;/h3&gt;&lt;p&gt;嵌套类型也是Swift中靠近现代化语言的重要一步，各种主流高级设计语言中，对嵌套类型的定义都有细微区别。比如，Java中的成员内部类其实就是一个闭包，而静态内部类才是和Swift内部类类似的存在。不过，&lt;strong&gt;嵌套类型的设计，基本都是为了提供更严格的访问控制，和隔离实现&lt;/strong&gt;。除此之外，由于Swift中没有名称空间（&lt;em&gt;Name Space&lt;/em&gt;）和包（&lt;em&gt;Package&lt;/em&gt;），只有模块（&lt;em&gt;Module&lt;/em&gt;）的概念，嵌套类型也常用来组织一系列相关的类，用以类更精细化的管理。参考下面这样一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GraphicElement&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GraphicElementFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;text&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;title&quot;&gt;GraphicElement&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TextGraphicElement&lt;/span&gt;(text: text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TextGraphicElement&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;GraphicElement&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; text: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(text: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.text = text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; element = &lt;span class=&quot;type&quot;&gt;GraphicElementFactory&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;element.draw()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的示例，我们通过嵌套类来对外屏蔽实现细节，从面向对象的角度来考虑，这提供了良好的封装性，约束了使用者必须通过某种唯一途径来获得接口的实例。考虑下Foundation中的类簇，这种更严格的访问控制使得我们能设计出对客户代码侵入性更小的类库，减少使用者对某些他们并不关心类的困惑。&lt;/p&gt;
&lt;h3 id=&quot;安全的覆写&quot;&gt;&lt;a href=&quot;#安全的覆写&quot; class=&quot;headerlink&quot; title=&quot;安全的覆写&quot;&gt;&lt;/a&gt;安全的覆写&lt;/h3&gt;&lt;p&gt;最后稍微提及一下Swift在&lt;code&gt;override&lt;/code&gt;上的改进，也就是面向对象中的覆写。这一点在Objective-C中简直是糟透了，因为当你继承一个类时，一不小心你就可能覆写掉了父类的某个私有方法，结果当然是你无法预计的。所以，为了防止这样的情况出现，我们会在私有方法命名前加上一些毫无意义的标识，这对追求优雅的人来说，是极度痛苦的（&lt;em&gt;有段时间我一直在比较，究竟用几个下划线比较好看&lt;/em&gt;）。好在Swift里对此做出了很好的改进，&lt;strong&gt;如果子类要覆写父类中的方法，那么必须使用&lt;code&gt;override&lt;/code&gt;关键字，如果子类中出现了与父类签名相同的方法，并且没有标记&lt;code&gt;override&lt;/code&gt;则编译不会通过&lt;/strong&gt;。这很棒！不是么？编译器向我们保证了继承链中不会存在意外覆写的状况，又为我们减少了一个可能会掉入的坑，所以，现在的程序员，真是太幸福了。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bar&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 编译不通过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重新定义函数&quot;&gt;&lt;a href=&quot;#重新定义函数&quot; class=&quot;headerlink&quot; title=&quot;重新定义函数&quot;&gt;&lt;/a&gt;重新定义函数&lt;/h2&gt;&lt;p&gt;众所周知，Swift是一个支持函数式编程的语言，所以在函数这块与传统的命令式编程有较大的区别。首先，我们要搞清楚，什么是&lt;strong&gt;函数&lt;/strong&gt;，什么是&lt;strong&gt;方法&lt;/strong&gt;？函数是统称，而方法是主体的行为，也就是定义在类或其它主体中的函数。&lt;/p&gt;
&lt;h3 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h3&gt;&lt;p&gt;在函数式编程里，我们不得不说说高阶函数，这是函数式与命令式最大的区别。在函数式编程里，函数是可以做为函数的输入参数和返回值，而&lt;strong&gt;高阶函数便是参数或返回值中有函数的函数&lt;/strong&gt;。Swift中的高阶函数定义使用的是闭包表达式，这在闭包的章节里已经有所提及，参看下面这个高阶函数：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(trans: &lt;span class=&quot;params&quot;&gt;(Element)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) -&amp;gt; [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ele &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result.append(trans(ele))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;translateInt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\(i)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; strArray = array.select(translateInt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(strArray)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面&lt;code&gt;Array&lt;/code&gt;扩展中的&lt;code&gt;select&lt;/code&gt;方法便是一个高阶函数，因为它接受一个方法参数，当然，我们也可以用闭包直接代替。高阶函数的使用，可以简化一些算法的实现，并且能有效的减少一些多余的中间变量。也因为有高阶函数的存在，使得函数和普通变量站在了同等的地位，这是函数式编程很大的特点。在其它的函数式编程语言中，还会有一些更加高级的函数式特性，相信在不久的将来，这些特性也都会加入到Swift中，参考下面&lt;code&gt;F#&lt;/code&gt;的一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pa f x = (f (x - &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;), f (x + &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; g1 x y = x ** y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; h = pa g1 &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 函数的局部应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;函数参数&quot;&gt;&lt;a href=&quot;#函数参数&quot; class=&quot;headerlink&quot; title=&quot;函数参数&quot;&gt;&lt;/a&gt;函数参数&lt;/h3&gt;&lt;p&gt;谈到函数，那不得不说说它的参数了，这也是Swift区别与很多其它语言的地方。在古老的Objective-C中，方法的参数命名与其它同等级语言差别是巨大的，虽然褒贬不一，但不得不说，相比于Java或C#，它的可读性是最强的。苹果似乎一直想要保持这种的&lt;code&gt;代码即文档&lt;/code&gt;的作风，所以在Swift中保留了这样类似的特性，并且对它做了简化，对比一下定义即可：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objective-C&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)loginWithUsername:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)username password:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)password;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loginWithUsername&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String, password: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;算一算，一共帮你省略了多少字符，这对保护你珍贵Mac键盘还是很有好处的！另外与参数话题相关的，就是&lt;strong&gt;参数默认值&lt;/strong&gt;了，因为Swift参数是携有命名的特性，所以参数的默认值并不像其它语言中那样必须放置在最后的几个参数，这又让Swift能对自己拥有命名参数而引以为豪了：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 放置在第一位的默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loginWithUsername&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String = &lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt;, password: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后要说的便是&lt;strong&gt;可变参数列表&lt;/strong&gt;了，在Objective-C中也有可变参数列表，比如&lt;code&gt;NSLog&lt;/code&gt;中后续的参数，但是，在不进行任何文档查阅和网络搜索的情况下，你能默写出来么？我觉得大多数人都写不出来，而在Swift中，这种情况得以改变，可变参数列表直接与数组使用类似：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(format: String, args: String ...)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; arg &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; args &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(arg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码片段中的&lt;code&gt;args&lt;/code&gt;，其实就是一个类似与数组的参数，这比起Objective-C中的使用要简单的很多，也与其它编程语言中类似。&lt;/p&gt;
&lt;h3 id=&quot;自定义操作符&quot;&gt;&lt;a href=&quot;#自定义操作符&quot; class=&quot;headerlink&quot; title=&quot;自定义操作符&quot;&gt;&lt;/a&gt;自定义操作符&lt;/h3&gt;&lt;p&gt;自定义操作符是一个非常酷的特性，它可以帮我们&lt;strong&gt;将一些嵌套调用的代码变得更加清晰&lt;/strong&gt;，在Swift中，操作符其实就是一个特定的函数，这也是与众多函数式编程语言保持一致的地方。假设我们要做一个图片滤镜的程序，也就是说，可以对图片应用各种滤镜效果，那么应该有以下这样类似的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Image&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filterNames = [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImageFilter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(image: Image)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GrayFilter&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;ImageFilter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(image: Image)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image.filterNames.append(&lt;span class=&quot;string&quot;&gt;&quot;gray&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlurFilter&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;ImageFilter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(image: Image)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image.filterNames.append(&lt;span class=&quot;string&quot;&gt;&quot;blur&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContrastFilter&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;ImageFilter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(image: Image)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image.filterNames.append(&lt;span class=&quot;string&quot;&gt;&quot;contrast&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们要对图片应用滤镜时，则可能会写出类似下面这样的嵌套调用：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; image = &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; gray = &lt;span class=&quot;type&quot;&gt;GrayFilter&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; blur = &lt;span class=&quot;type&quot;&gt;BlurFilter&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; contrast = &lt;span class=&quot;type&quot;&gt;ContrastFilter&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contrast.apply(blur.apply(gray.apply(image)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候，我们可以用自定义操作符来解开这样的嵌套，类似下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;infix&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; |&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;associativity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;precedence&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; |&amp;gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;: Image, &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;: ImageFilter)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Image&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt;.apply(&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; outputImage = image |&amp;gt; gray |&amp;gt; blur |&amp;gt; contrast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(outputImage.filterNames)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过自定义&lt;code&gt;|&amp;gt;&lt;/code&gt;这样一个操作符，我们使用者的代码表述性变得更强，也将相关性的处理放置在了同一条语句里。这种感觉是不是非常棒？似乎已经看到你们在YY一些奇怪的操作符了。关于自定义操作符的语法，这里简单的说明下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;infix&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; |&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;associativity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;precedence&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;infix&lt;/span&gt;			: 代表操作符类型，可以为 &lt;span class=&quot;keyword&quot;&gt;prefix&lt;/span&gt;(前置) &lt;span class=&quot;keyword&quot;&gt;infix&lt;/span&gt;(中置) &lt;span class=&quot;keyword&quot;&gt;postfix&lt;/span&gt;(后置)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;		: 固定关键字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&amp;gt;				: 要定义的操作符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;associativity&lt;/span&gt;	: 可以为 &lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;none&lt;/span&gt;，表示当两个同等优先级的中置操作符出现时，优先使用哪个。如果为 &lt;span class=&quot;keyword&quot;&gt;none&lt;/span&gt; 则不能将操作符连接。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;precedence&lt;/span&gt;	: 操作符的优先级，值越大，优先级越高，+ 的优先级为 &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;介绍完操作符，函数这块的内容应该也可以告一段落了，接下来介绍下属性相关的特性！&lt;/p&gt;
&lt;h2 id=&quot;强大的属性&quot;&gt;&lt;a href=&quot;#强大的属性&quot; class=&quot;headerlink&quot; title=&quot;强大的属性&quot;&gt;&lt;/a&gt;强大的属性&lt;/h2&gt;&lt;p&gt;属性在面向对象的设计中，也是非常重要的一个概念，属性是对对象某种状态值的抽象，比如颜色、大小、重量等。在Objective-C中，属性又称之为自动合成属性，因为是编译器将&lt;strong&gt;设置&lt;/strong&gt;和&lt;strong&gt;获取&lt;/strong&gt;方法，按照属性的关键字进行自动合成的。这种方式在其它语言里也很常见，比如C#的属性也是类似，可以通过反射获取到单独的设置和获取方法。Swift中的属性也是传承了Objective-C属性的一些特性，并做了一些调整，比如去除了原子性描述，由于目前并没有太多关于Swift运行时的文档，也没有做一些关于这方面的Hack，所以原理性的东西这边就不提及了。&lt;/p&gt;
&lt;h3 id=&quot;延时属性&quot;&gt;&lt;a href=&quot;#延时属性&quot; class=&quot;headerlink&quot; title=&quot;延时属性&quot;&gt;&lt;/a&gt;延时属性&lt;/h3&gt;&lt;p&gt;在Objective-C中，我们可以手动的实现一个延时属性，也就是只有当属性第一次被调用时，才真正的去构建属性的实例。这种特性在Swift中，已经在语法层级得到了支持，这样对&lt;strong&gt;处理一些占用内存较大，但又不是很常用的属性&lt;/strong&gt;时，能有效的降低内存使用率。下面是在Objective-C中实现延时属性的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataManager&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataManager&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; data = _data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *)data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_data == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _data = [&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithContentsOfFile:&lt;span class=&quot;string&quot;&gt;@&quot;a/big/file&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的写法虽然代码量不大，但毕竟会增加工作量，另外这种写法在多线程环境中并不严谨，如果再加上线程互斥的代码，整个延时属性的实现就会有更多的代码量和复杂度。所以，在Swift中，多线程并发的这种需求完全由编译器来保证，那么，我们实现这个延时属性，使用下面的代码即可：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataManager&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data: &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt;(contentsOfFile: &lt;span class=&quot;string&quot;&gt;&quot;a/big/file&quot;&lt;/span&gt;)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bingo！！这样的特性太棒了，为我们省略了不少工作量啊！&lt;/p&gt;
&lt;h3 id=&quot;属性监听&quot;&gt;&lt;a href=&quot;#属性监听&quot; class=&quot;headerlink&quot; title=&quot;属性监听&quot;&gt;&lt;/a&gt;属性监听&lt;/h3&gt;&lt;p&gt;属性监听也是Swift中从语法层级支持的特性，当然，没有语法层级的支持，我们也可以手动撸出同样效果的代码，但总归是麻烦了点。首先我们要区别&lt;code&gt;KVO&lt;/code&gt;和属性监听的区别，&lt;code&gt;KVO&lt;/code&gt;是对其它对象属性的变化进行监听，而属性监听是对自身属性的变化进行监听。在语法层支持属性监听，使得我们可以将属性的存储逻辑和监听逻辑分离，这会使得我们代码结构更加清晰。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StepCounter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; step: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;willSet&lt;/span&gt;(newValue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;new value \(newValue)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;old value \(oldValue)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stepCounter = &lt;span class=&quot;type&quot;&gt;StepCounter&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stepCounter.step = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stepCounter.step = &lt;span class=&quot;number&quot;&gt;201&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new value 200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// old value 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// new value 201&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// old value 200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在属性监听代码块里，我们可以获取到新设定的值和原始的值，而且这个块中的操作是线程安全的。所以，我们是可以在这个块里，&lt;strong&gt;做一些与属性值相关的策略逻辑&lt;/strong&gt;，比如只在特定某些值下触发的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;下标&quot;&gt;&lt;a href=&quot;#下标&quot; class=&quot;headerlink&quot; title=&quot;下标&quot;&gt;&lt;/a&gt;下标&lt;/h3&gt;&lt;p&gt;下标在Objective-C中是使用非正式协议的方式实现的，但对下标类型有所限制，而在Swift中对下标类型和数量是没有什么限制的，并且下标是支持&lt;strong&gt;重载&lt;/strong&gt;的。这又给了我们创造的空间，比如用字符串或索引来取自定义配置文件中的值：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConfigurationFile&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(key: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(index: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; config = &lt;span class=&quot;type&quot;&gt;ConfigurationFile&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(config[&lt;span class=&quot;string&quot;&gt;&quot;a key&quot;&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + config[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下标主要是适用场景是&lt;strong&gt;需要一种能通过索引快速取值&lt;/strong&gt;设计，它和属性非常相似，所以将其归类到了属性这一块。&lt;/p&gt;
&lt;h2 id=&quot;运行时的安全&quot;&gt;&lt;a href=&quot;#运行时的安全&quot; class=&quot;headerlink&quot; title=&quot;运行时的安全&quot;&gt;&lt;/a&gt;运行时的安全&lt;/h2&gt;&lt;p&gt;前面谈过了类型安全，这里再简单谈谈Swift在运行时是如何处理异常的。与很多传统的编程语言一样，Swift引入了&lt;code&gt;try - catch&lt;/code&gt;机制，在Objective-C中也有&lt;code&gt;try&lt;/code&gt;和&lt;code&gt;catch&lt;/code&gt;，但与其它语言中的不同，Objective-C的异常处理在内存管理上存在泄露的风险。所以我们一直都在用&lt;code&gt;NSError&lt;/code&gt;这样的错误处理模型，苹果提供的类库中也都采取了这样的处理方式，而在Swift中，这点得以改进，Swift中的&lt;code&gt;throws&lt;/code&gt;函数必须用&lt;code&gt;try&lt;/code&gt;去调用，所以很容易在ARC环境下生成&lt;code&gt;retain&lt;/code&gt;和&lt;code&gt;release&lt;/code&gt;代码，所以再也不用当心内存泄露的问题了。&lt;/p&gt;
&lt;p&gt;在Swift中，所有可以抛出的异常，必须实现&lt;code&gt;ErrorType&lt;/code&gt;协议，当然&lt;code&gt;NSError&lt;/code&gt;实现了这样的协议。而如果我们要自定义异常，则必须使用枚举类型，原因很简单，因为枚举配合它的关联值特别适合做这样的事情：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoginError&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;ErrorType&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;InvalidUsername&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;InvalidPassword&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Other&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(username: String, password: String)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; username != &lt;span class=&quot;string&quot;&gt;&quot;makee&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;InvalidUsername&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; password != &lt;span class=&quot;string&quot;&gt;&quot;sun&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;InvalidPassword&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Other&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;unknow error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; login(&lt;span class=&quot;string&quot;&gt;&quot;makee&quot;&lt;/span&gt;, password: &lt;span class=&quot;string&quot;&gt;&quot;sun&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;InvalidUsername&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;InvalidPassword&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LoginError&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Other&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，如果确定没有任何异常，我们只要使用&lt;code&gt;try!&lt;/code&gt;去调用即可，这样可以省略掉&lt;code&gt;do - cacth&lt;/code&gt;这样的代码结构。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;! login(&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;, password: &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候需要注意，就和可选类型的强制解包一样，如果失败了是会导致Crash的。Swift引入了这样的异常处理机制，虽然在语法的角度上与其它语言大相径庭，但如果从ARC的角度去考虑，就会觉得，这不失为一种很好的妥协。比较Swift没有垃圾回收机制，所有的内存管理都是靠程序本身去处理，有了这样的异常处理机制，我们应该更少的使用&lt;code&gt;nil&lt;/code&gt;，这样我们的程序会更加健壮。&lt;/p&gt;
&lt;p&gt;与Java的异常处理类似，Swift中的异常处理也存在&lt;strong&gt;冒泡机制&lt;/strong&gt;，也就是异常向上传递，这种特性使得我们的异常是可传递的，但为了内存管理考虑，还是必须要使用上&lt;code&gt;try&lt;/code&gt;关键字。比如下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; login(&lt;span class=&quot;string&quot;&gt;&quot;usr&quot;&lt;/span&gt;, password: &lt;span class=&quot;string&quot;&gt;&quot;pwd&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候，调用&lt;code&gt;test&lt;/code&gt;函数时，异常是从&lt;code&gt;login&lt;/code&gt;冒上来的，这就是异常传递机制。通过这样的设定，我们不会忽略掉任何异常，配合&lt;strong&gt;模式匹配&lt;/strong&gt;中所讲述的内容，我们的&lt;code&gt;catch&lt;/code&gt;块可控性也是非常灵活的。唯一不足的是，并不能像Java那样知道到底会抛出何种异常，这点和&lt;code&gt;C#&lt;/code&gt;中倒是有点类似，也只能靠文档来弥补了。&lt;/p&gt;
&lt;h2 id=&quot;最后再说一点&quot;&gt;&lt;a href=&quot;#最后再说一点&quot; class=&quot;headerlink&quot; title=&quot;最后再说一点&quot;&gt;&lt;/a&gt;最后再说一点&lt;/h2&gt;&lt;p&gt;作为单篇文章，本次所讲述的内容可能有点过多，因为我觉得Swift真的有太多比Objective-C强大的地方，也非常愿意作为Swift的传道士。碍于篇幅，这篇文章中还有很多Swift的小特性没有提及，比如表达式的&lt;code&gt;where&lt;/code&gt;子句，枚举类型的&lt;code&gt;rawValue&lt;/code&gt;等，这些就留给在座各位自己去摸索了。&lt;/p&gt;
&lt;p&gt;本篇文章中，我想要达到的目的并不仅仅是让在座各位了解到Swift的特性，更希望能让大家明白在什么场景下去使用这样的特性。所以文章中花了很大的篇幅描述使用场景和我认为的设计初衷，语法细节都是很简单的略过了，因为语法是很容易从官方文档中找到说明的，而使用场景和相应的一些思想是很难从文档上找到的。&lt;/p&gt;
&lt;p&gt;那么，本篇就到这里了，希望大家能够有所收获，&lt;strong&gt;一同学习，成就更好的自己&lt;/strong&gt;！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Swift&lt;/code&gt;，已经出来一年多了，想必不少人都曾对它抱着观望的态度，如果现在的你还是这样的态度，那么是时候去改变了。作为一个年龄比我还大的语言————&lt;code&gt;Objective-C&lt;/code&gt;，是时候淡出历史的舞台了，有人说&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;会并存，但我觉得，短期内会这样，从长远的角度来看，并存的可能性并不大。毕竟，它们不是&lt;code&gt;C&lt;/code&gt;和&lt;code&gt;C++&lt;/code&gt;这样的关系，它们更像&lt;code&gt;Delphi&lt;/code&gt;与&lt;code&gt;C#&lt;/code&gt;这样的存在。从可维护的角度来说，并存的代价比较大，所以，对于&lt;code&gt;Objective-C&lt;/code&gt;，放手吧。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
</feed>

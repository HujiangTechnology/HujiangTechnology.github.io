{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/hexo-theme-freemind/source/js/search.js","path":"js/search.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/hexo-theme-freemind/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/hexo-theme-freemind/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/yeti.css","path":"css/themes/yeti.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/united.css","path":"css/themes/united.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/superhero.css","path":"css/themes/superhero.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/spacelab.css","path":"css/themes/spacelab.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/slate.css","path":"css/themes/slate.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/simplex.css","path":"css/themes/simplex.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/sandstone.css","path":"css/themes/sandstone.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/readable.css","path":"css/themes/readable.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/paper.css","path":"css/themes/paper.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/lumen.css","path":"css/themes/lumen.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/journal.css","path":"css/themes/journal.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/flatly.css","path":"css/themes/flatly.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/darkly.css","path":"css/themes/darkly.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/cyborg.css","path":"css/themes/cyborg.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/cosmo.css","path":"css/themes/cosmo.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/cerulean.css","path":"css/themes/cerulean.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/themes/bootstrap.css","path":"css/themes/bootstrap.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/style.css","path":"css/style.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/responsive.css","path":"css/responsive.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/highlight.css","path":"css/highlight.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0},{"_id":"themes/hexo-theme-freemind/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0}],"Cache":[{"_id":"source/_posts/take-you-to-learn-swift-feng-sao.md","shasum":"b768786146d6b541fc44512b9a6156099bb1cd30","modified":1456468252000},{"_id":"source/about/index.md","shasum":"f972719968375a77c3229466227f65c66b7f4738","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/LICENSE","shasum":"a708d11fd1944ab4b94b39a8c83c75f362a170d7","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/README.md","shasum":"f108da3f1be0b404f0292504ea21a8383018664d","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/_config.yml","shasum":"baaabaf574e2a6b418a8506c9ea07f3cb130c307","modified":1456471464000},{"_id":"themes/hexo-theme-freemind/languages/default.yml","shasum":"155f627b68439b096421516fe742b885a6983c1f","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/languages/pt-BR.yml","shasum":"fa8333f571440de5562918728ff2d206f7960269","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/languages/zh-CN.yml","shasum":"8d4b269767b25d1271805de714844cefc344fd1b","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/languages/zh-TW.yml","shasum":"4c553ca4ba1d30b8aad312baae14f2050790f0e2","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/after_footer.ejs","shasum":"95db6c8dd058503987061c0f1e42e00c5611d422","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/archive.ejs","shasum":"6d670ee9910ac9f4ca370f23ffda15466ca01eff","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/article.ejs","shasum":"46b69db58f707b810e96354c7a61deaa5f456aec","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/footer.ejs","shasum":"22449f62f035b9a0ea3f0c134228485dd9b3e1b2","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/head.ejs","shasum":"acf773ec06100b0b63ea5600a38c4b07490e8f4a","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/index.ejs","shasum":"6cb906da2b19e4abad02a321313b7fb76ae2bb8b","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/index_pagination.ejs","shasum":"8c5df88fc41e119a42fc8c43a23f1b3c08a3347d","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/navigation.ejs","shasum":"f1fa4aefb27ef8f90b47b36a8d1d9aede8fdcaf1","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/analytics.ejs","shasum":"31a0a3e5bc616b847c1ed82293fb3a3fc97054be","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/bdshare.ejs","shasum":"24c91ac17714ea39120a18633c3611b15464e5ab","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/category.ejs","shasum":"54c22e9df09949f59298b21bb2fd55b01fa68845","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/comment.ejs","shasum":"de0d7db55492f16ca206ccc33ead5988d56c3972","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/comment_footer.ejs","shasum":"fefc355eb4d61d08ffca7f6439fecb146696265e","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/entry.ejs","shasum":"659d1f82d501c4b3a866ba4919003bcc695452d9","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/jiathis.ejs","shasum":"6fbf47f67e6f18fe4fea7fff6b564d29512469b5","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/meta.ejs","shasum":"d37b3981e0cbb1a13db6d0dc884b6938bbeeed1b","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/pagination.ejs","shasum":"c9c1456c0152888cf41dfb5b43684470787400a8","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/share.ejs","shasum":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/slogan.ejs","shasum":"f82820a4af877570074895927f3bddc3b4b6a4fa","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/tag.ejs","shasum":"ca231a24b4d17206991da3468842dd8610d94080","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/post/title.ejs","shasum":"edfa78ed7a845d15bb43eca6268115704ec8072e","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/search.ejs","shasum":"a7c526c07a8af040ba285dc63f267004ce211dce","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_partial/sidebar.ejs","shasum":"862ff700568ec5a00f222131b353475d0a3f2a9c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_widget/category.ejs","shasum":"de53882f5133318a1d16d24633cbcb2cefcccb75","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_widget/links.ejs","shasum":"bd70c0652f99b20316dbd617d2f1dd04371ccdf5","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_widget/recent_posts.ejs","shasum":"9b040968403348e1e5a3d11d219e1ba38e8a3022","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_widget/search.ejs","shasum":"620dd8a93a9f0fca63f6f0b520cf192ce7b5a645","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/_widget/tagcloud.ejs","shasum":"eacdf98e5ae31ca0dc90c376798c86cadccddc6c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/archive.ejs","shasum":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/categories.ejs","shasum":"4702d93c9f437436138fb348ece828fe93f5b292","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/index.ejs","shasum":"2beec802d9dadb9369ffc7511304b1cc1feb96b0","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/layout.ejs","shasum":"288577e8d379364126679ae8466bee90b62bbda8","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/page.ejs","shasum":"21612a42b29cb20f106bc2716c598e69db142750","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/post.ejs","shasum":"dd2ad444d8a916a4f3fbcfb6e1b5f19890429ec4","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/layout/tags.ejs","shasum":"67f650c3fac6c80548607f0369bfebacf56aba08","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/font-awesome.css","shasum":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/google-fonts.css","shasum":"91e629d0a0a531e920252788ed8863c26608c2b2","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/highlight.css","shasum":"98a031dd0991929ec23098db9dfde15ae662f031","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/responsive.css","shasum":"25136a75af5957a669d5c4782da8b8fa95f8fc55","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/style.css","shasum":"0938ef6424491cbcf261c31307257699d4fefdba","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.eot","shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","shasum":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.woff","shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","shasum":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","shasum":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","shasum":"f401d51152681048c06187c5d3919b1407b899c5","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","shasum":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","shasum":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","shasum":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","shasum":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/img/glyphicons-halflings-white.png","shasum":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/img/github-sprite.png","shasum":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/img/glyphicons-halflings.png","shasum":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/img/grid-18px-masked.png","shasum":"1379b689836f9fcccd88aa729c4034d6b36e1f3c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/img/grid-baseline-20px.png","shasum":"43b8d0c9b39f5ce07ecfde036fd13f835c129238","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/bootstrap.min.js","shasum":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/gallery.js","shasum":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/jquery.imagesloaded.min.js","shasum":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/main.js","shasum":"d78290344d95646172e488e0af2dade9740288f8","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/search.js","shasum":"901b18b539a0cc6c2b90f93e79faf43e590fe3fd","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/FontAwesome.otf","shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.ttf","shasum":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/js/jquery-2.0.3.min.js","shasum":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/bootstrap.css","shasum":"3585abc5bde451ae9495fcda0eede9db30b0ff25","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/cerulean.css","shasum":"64ba8c5775415503ee7ba595efb1366dc1a82113","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/cosmo.css","shasum":"d0757dfaa45358eca17352b1ca70f30bb0f84f41","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/cyborg.css","shasum":"535fa312b1fbe1d8bc74bc29e6092f0c0c435917","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/darkly.css","shasum":"8b2e1628ce059ae6d8ca1179d39b30ced4e03e89","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/lumen.css","shasum":"c8a2abc73da3217436c98ce64c641080aea43a9e","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/flatly.css","shasum":"921de4176b3612ca76253e25059647090c45cab3","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/journal.css","shasum":"d766ec4d311c5b1a566185b792e9210026ab0538","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/paper.css","shasum":"04fea5fe98156eeb4df001b2b57542036d9ae4db","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/readable.css","shasum":"f5957982eb4e2b4c7d8bb34c50e56e5c51143628","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/sandstone.css","shasum":"30d18aa4e1c53b0cc34251ed53dc2350c2ae6269","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/simplex.css","shasum":"1d81c53345876c2a79fa33f512636328c349d081","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/slate.css","shasum":"66109ab27eb691c020756c1c0f56246e2979874c","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/spacelab.css","shasum":"4a52226a05214af6c0ca5022c3c1d6b545af3bf6","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/superhero.css","shasum":"81b38dd53aa728873974830fa14431a51a10f241","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/yeti.css","shasum":"9962630e701b5fa116133e61360040b66e93cd43","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/css/themes/united.css","shasum":"c6c2bcf47b87d48f626b96ef7499e1da7d4d4f7b","modified":1456468252000},{"_id":"themes/hexo-theme-freemind/source/fonts/fontawesome-webfont.svg","shasum":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1456468252000},{"_id":"public/js/search.js","modified":1456470286565,"shasum":"901b18b539a0cc6c2b90f93e79faf43e590fe3fd"},{"_id":"public/js/main.js","modified":1456470286568,"shasum":"d78290344d95646172e488e0af2dade9740288f8"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1456470286570,"shasum":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5"},{"_id":"public/js/jquery-2.0.3.min.js","modified":1456470286571,"shasum":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997"},{"_id":"public/js/gallery.js","modified":1456470286573,"shasum":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55"},{"_id":"public/js/bootstrap.min.js","modified":1456470286574,"shasum":"6c264e0e0026ab5ece49350c6a8812398e696cbb"},{"_id":"public/img/grid-baseline-20px.png","modified":1456470286579,"shasum":"43b8d0c9b39f5ce07ecfde036fd13f835c129238"},{"_id":"public/img/grid-18px-masked.png","modified":1456470286581,"shasum":"1379b689836f9fcccd88aa729c4034d6b36e1f3c"},{"_id":"public/img/glyphicons-halflings.png","modified":1456470286582,"shasum":"84f613631b07d4fe22acbab50e551c0fe04bd78b"},{"_id":"public/img/glyphicons-halflings-white.png","modified":1456470286585,"shasum":"a25c4705320fd63c33790e666872910e702b9bf6"},{"_id":"public/img/github-sprite.png","modified":1456470286586,"shasum":"4d7ee33beaaebf002ba57a172d159e46194ae481"},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":1456470286588,"shasum":"e6c9f1e5a6a966a8f7250201356f351890a48921"},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":1456470286592,"shasum":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d"},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":1456470286595,"shasum":"d9f913d09bb3c25749daf8e7ab829c850a842929"},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":1456470286597,"shasum":"18dc51e642b4df958098d3bbc6d3ba0237ef6150"},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":1456470286600,"shasum":"f401d51152681048c06187c5d3919b1407b899c5"},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":1456470286602,"shasum":"87deb174af2e2beebb9f09d618a5159ca299a3d0"},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":1456470286604,"shasum":"33225e85c33279e7b4f0c5c65ff93bec740dd59c"},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":1456470286605,"shasum":"1d9bb14c006d39d7eb0812a85567c7431f899b8d"},{"_id":"public/fonts/fontawesome-webfont.woff","modified":1456470286607,"shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c"},{"_id":"public/fonts/fontawesome-webfont.ttf","modified":1456470286609,"shasum":"6225ccc4ec94d060f19efab97ca42d842845b949"},{"_id":"public/fonts/fontawesome-webfont.svg","modified":1456470286613,"shasum":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9"},{"_id":"public/fonts/fontawesome-webfont.eot","modified":1456470286615,"shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6"},{"_id":"public/fonts/FontAwesome.otf","modified":1456470286617,"shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1456470286619,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1456470286620,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1456470286621,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1456470286623,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1456470286625,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1456470286627,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1456470286631,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1456470286633,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/themes/yeti.css","modified":1456470286634,"shasum":"9962630e701b5fa116133e61360040b66e93cd43"},{"_id":"public/css/themes/united.css","modified":1456470286637,"shasum":"c6c2bcf47b87d48f626b96ef7499e1da7d4d4f7b"},{"_id":"public/css/themes/superhero.css","modified":1456470286639,"shasum":"81b38dd53aa728873974830fa14431a51a10f241"},{"_id":"public/css/themes/spacelab.css","modified":1456470286641,"shasum":"4a52226a05214af6c0ca5022c3c1d6b545af3bf6"},{"_id":"public/css/themes/slate.css","modified":1456470286643,"shasum":"66109ab27eb691c020756c1c0f56246e2979874c"},{"_id":"public/css/themes/simplex.css","modified":1456470286645,"shasum":"1d81c53345876c2a79fa33f512636328c349d081"},{"_id":"public/css/themes/sandstone.css","modified":1456470286648,"shasum":"30d18aa4e1c53b0cc34251ed53dc2350c2ae6269"},{"_id":"public/css/themes/readable.css","modified":1456470286651,"shasum":"f5957982eb4e2b4c7d8bb34c50e56e5c51143628"},{"_id":"public/css/themes/paper.css","modified":1456470286654,"shasum":"04fea5fe98156eeb4df001b2b57542036d9ae4db"},{"_id":"public/css/themes/lumen.css","modified":1456470286656,"shasum":"c8a2abc73da3217436c98ce64c641080aea43a9e"},{"_id":"public/css/themes/journal.css","modified":1456470286658,"shasum":"d766ec4d311c5b1a566185b792e9210026ab0538"},{"_id":"public/css/themes/flatly.css","modified":1456470286660,"shasum":"921de4176b3612ca76253e25059647090c45cab3"},{"_id":"public/css/themes/darkly.css","modified":1456470286662,"shasum":"8b2e1628ce059ae6d8ca1179d39b30ced4e03e89"},{"_id":"public/css/themes/cyborg.css","modified":1456470286664,"shasum":"535fa312b1fbe1d8bc74bc29e6092f0c0c435917"},{"_id":"public/css/themes/cosmo.css","modified":1456470286665,"shasum":"d0757dfaa45358eca17352b1ca70f30bb0f84f41"},{"_id":"public/css/themes/cerulean.css","modified":1456470286669,"shasum":"64ba8c5775415503ee7ba595efb1366dc1a82113"},{"_id":"public/css/themes/bootstrap.css","modified":1456470286672,"shasum":"3585abc5bde451ae9495fcda0eede9db30b0ff25"},{"_id":"public/css/style.css","modified":1456470286674,"shasum":"7516e6e235c029b28992e9a11aabfe666e502496"},{"_id":"public/css/responsive.css","modified":1456470286675,"shasum":"25136a75af5957a669d5c4782da8b8fa95f8fc55"},{"_id":"public/css/highlight.css","modified":1456470286677,"shasum":"98a031dd0991929ec23098db9dfde15ae662f031"},{"_id":"public/css/google-fonts.css","modified":1456470286678,"shasum":"91e629d0a0a531e920252788ed8863c26608c2b2"},{"_id":"public/css/font-awesome.css","modified":1456470286679,"shasum":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d"},{"_id":"public/about/index.html","modified":1456470286720,"shasum":"971a10997e481c2242cedf1172730d1d7005e319"},{"_id":"public/2016/02/24/take-you-to-learn-swift-feng-sao/index.html","modified":1456470286796,"shasum":"e94ce54d5608c90ebfaac6882ece2466ac72f685"},{"_id":"public/archives/index.html","modified":1456470286831,"shasum":"cabd4ddf6c4812aab450a48f7bc858acb3b1bd78"},{"_id":"public/archives/2016/index.html","modified":1456470286865,"shasum":"29abe34f364d2d8f55fa6908da7e3cacb9671721"},{"_id":"public/archives/2016/02/index.html","modified":1456470286895,"shasum":"4d4be34c8d0165d8cbaeedd19e2942a2303f3fc6"},{"_id":"public/categories/iOS开发/index.html","modified":1456470286930,"shasum":"ae720ea8f2a2b805dd64e83c719998a395cf697b"},{"_id":"public/index.html","modified":1456470286968,"shasum":"96d38c57a71cd985388145e09ad1a88062be2d8e"},{"_id":"public/tags/Swift/index.html","modified":1456470286992,"shasum":"9a7484dcc54130f98dd729d8b6be32b37f736f9f"},{"_id":"public/atom.xml","modified":1456471005946,"shasum":"1bf80427802ae90fa5f519d57347ca83b09884ab"}],"Category":[{"name":"iOS开发","_id":"cil3csxbb0001zvcf41kxcu24"}],"Data":[],"Page":[{"title":"关于网站","_content":"沪江iOS开发周报","source":"about/index.md","raw":"---\ntitle: 关于网站\n---\n沪江iOS开发周报","date":"2016-02-26T06:30:52.000Z","updated":"2016-02-26T06:30:52.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cil3csxbh0005zvcf5fo01dts"}],"Post":[{"title":"带你领略 Swift 的风骚","date":"2016-02-24T08:26:13.000Z","toc":true,"_content":"\n`Swift`，已经出来一年多了，想必不少人都曾对它抱着观望的态度，如果现在的你还是这样的态度，那么是时候去改变了。作为一个年龄比我还大的语言————`Objective-C`，是时候淡出历史的舞台了，有人说`Objective-C`和`Swift`会并存，但我觉得，短期内会这样，从长远的角度来看，并存的可能性并不大。毕竟，它们不是`C`和`C++`这样的关系，它们更像`Delphi`与`C#`这样的存在。从可维护的角度来说，并存的代价比较大，所以，对于`Objective-C`，放手吧。\n\n<!--more-->\n\n作为一个绝对现代化的编程语言，Swift集合了当下众多流行语言的特性，这与保守的`Objective-C`产生了鲜明的对比。如果你还在犹豫踌躇中，那么就让本文带你领略下新欢的风骚，这一切，你值得拥有！\n\n\n## 不得不说的简洁和优雅\n\n谈到Swift，不得不把它的优雅放在第一位，作为一门现代化的编程语言，优雅是它必备的特质，那么什么是**优雅**？所谓优雅就是在书写或阅读时，有种简单自然、一气呵成的感觉，不罗嗦、不做作，这是语法上的优雅，而设计中的优雅，又何尝不是这样？\n\n\n### 声明和实现的合并\n\n这可能是Swift向现代化语言看齐的第一步，在很多传统的编程语言里，例如C++、Pascal、Objective-C，类或方法的声明与实现是分离开的。当然C++是可以在头文件里直接实现内联方法，但这很不自然，也不安全，因为它会暴露给最终用户。\n\n以往声明和实现的分离，其实更像是`接口定义`与`接口实现`，但这种强制性的设定给使用者也会带来一些麻烦。就拿Objective-C来说，如果我要定义一个私有类，则会写在“.m”文件中，但这时候又不得不将声明也书写一遍，这是没有太多意义的；又比如，我一个简单到只有属性的`PONSO`，还不得不将一个空的实现书写一遍（_请抛开自动属性这些用户不需要知道的细节_）。\n\n任何一门现代化的编程语言，都摈弃了这种分离的方式，其原因是为了追求更加的简洁和优雅。而在这种合并的方式下，也迫使我们不会将一个类写得特别庞大，以前的团队合作中，大家只会看你的头文件，而现在，更多的是看你具体的代码实现了（_无疑，这也是一种Code Review_）。\n\n\n### 扩展（Extension）\n\n扩展，这也是Swift中非常有特色的设计，也是苹果编程语言的一贯传承。Swift中的扩展，其实是对Objective-C中`Category`和`Extension`的合并，在Objective-C中，我们会书写类似下面的代码：\n\n```objc\n@interface OCObject : NSObject\n@end\n\n@interface OCObject (Category) <NSCoding>\n@end\n```\n\n对比Swift，如下：\n\n```swift\nclass SwiftObject { }\n\nextension SwiftObject: NSCoding { }\n```\n\n扩展主要可应用于以下场景：\n\n1. 对原有类增加新协议适配，新方法\n2. 对实现代码按逻辑块进行划分（_比如按实现的协议划分_）\n\n在我所接触的其它语言里，也有扩展一说，比如C#，但C#的扩展其实完全只是语法糖，而Objective-C或Swift中的扩展，并不仅仅是语法上的便利，更有运行时的支持，考虑下面代码：\n\n```swift\nprotocol SwiftProtocol { }\n\nclass SwiftClass { }\n\nextension SwiftClass: SwiftProtocol { }\n\nlet swiftObject = SwiftClass()\n\nprint(swiftObject is SwiftProtocol)\n// print: true\n```\n\n不得不说，扩展对代码的优雅性上，也给出了不少的支援，相比于一个实现了N多协议的类，我们用`extension`进行划分会清晰很多。\n\n\n### 可选类型和可选链\n\n可选类型，也就是在一个类型的定以后，增加一个`?`号，代表这个变量可以为`nil`。这也是Swift相对于Objective-C的一个重大改进，使得代码更加安全，表述性更强。但，需要注意的是，这并不是Swifit特有的，在.Net平台中，可选类型也是非常常见的。对于以下的Objective-C代码：\n\n```objc\n- (NSString *)userAddress:(HJUser *)user {\n    if (user == nil) return nil;\n    if (user.city == nil) return nil;\n    if (user.street == nil) return nil;\n\n    return [NSString stringWithFormat:@\"%@%@\", user.city, user.street];\n}\n```\n\n从使用者的角度来说，我们必须要判断返回值，因为我们根本不确定是否会返回`nil`；而从设计者的角度来说，我们也很头疼，我们也不知道调皮的用户到底会给我们传入什么。而`__nonnull`这样的标示，根本就无法阻止这样的行为：\n\n```objc\n- (NSString * __nonnull)test:(NSString * __nonnull)arg {\n    return nil;\n}\n```\n\n这段代码在Xcode 7 beta2中编译，没有任何错误和警告。想一想上面的那段`userAddress `代码，其实我们很确定，如果传入的参数为空或者其属性为空，则返回值肯定为空；而对方法的设计而言，参数为空是没有任何意义的，我们应该让使用者保证他传入的参数是不能为`nil`的，而不是在两端都对`nil`进行判定，这无疑增加了复杂度（_三个方面：设计、使用、调试_），也不合理。所以，在Swift中对其进行改善：\n\n```swift\nfunc getUserAddress(user: HJUser) -> String {\n    return user.city + user.street\n}\n```\n\n我们可以安全的调用上面的方法，并不需要多余的`nil`判断，那么可选类型应该应用于什么场景呢？**可选类型，应该应用于某个变量、参数或返回值，存在空或非空两种合理的状态下**。也就是说它可以为空，也可以不为空，并且，从逻辑的角度考虑很合理。比如，下面的代码：\n\n```swift\nfunc findUser(username: String) -> HJUser? {\n    // 如果找到了则返回\n    // 否则返回nil\n    return nil\n}\n```\n\n从逻辑的角度考虑，我们查找数据，有两种结果：找到和没有找到，这样的场景下就特别适合使用可选类型。那么配合可选链，我们的代码会非常简洁和优雅：\n\n```swift\nfunc findUserRealName(username: String) -> String? {\n    return findUser(username)?.info?.realName\n}\n```\n\n\n### 模式匹配（Patterns）\n\n模式匹配，是函数式编程里非常常见的一个特性，这也和语言的优雅性息息相关，在Swift中，大概有以下几种模式匹配：\n\n1. 通配符（Wildcard Pattern）\n2. 标识符（Identifier Pattern）\n3. 值绑定（Value-Binding Pattern）\n4. 元组（Tuple Pattern）\n5. 枚举（Enumeration Case Pattern）\n6. 可选（Optional Pattern）\n7. 类型转换（Type-Casting Pattern）\n8. 表达式（Expression Pattern）\n\n关于模式匹配，下面的代码进行了很好的阐述：\n\n```swift\n// Identifier Pattern\nlet points: [(Int, Int)?] = [(0, 0), (1, 1), nil, (3, 3)]\n\nif case .Some(let p) = points[0] {  // Enumeration Pattern\n    print(p)\n}\n\nif let p = points[0] { // Identifier Pattern\n   print(p)\n}\n\nfor case let point? in points {  // Optional Pattern\n\n    let (x, _) = point  // Tuple Pattern\n    print(x)\n\n    switch point {\n    case (0, 0):        // Expression Pattern\n        print(\"0, 0\")\n    case let (1, y):    // Value-Binding Pattern\n        print(y)\n    case _:             // Wildcard Pattern\n        print(\"Wildcard Pattern\")\n    }\n}\n```\n\n对于模式匹配的深入理解，有助于对Swift的阅读，也有助于编写出更加简洁优雅的代码。anyway，只要记住，**模式匹配是一种类似于正则表达式的捕获规则**，比如通配符`_`可以捕获任何值，`(x, y)`只能捕获二元组，`(0, y)`只能匹配以0为第一元的二元组，可选和枚举也类似。从抽象的角度来说，所有的模式匹配，都有以下特质：\n\n* 需要有一个输入与之进行匹配测试\n* 匹配结果有两种：成功或失败\n* 匹配成功时，可捕获所匹配到的值\n\nThat's cool！感受下，如果没有这些便捷的模式匹配，用传统的条件分支语句，会写成怎样？\n\n### 闭包（Closure）\n\n没有闭包的编程语言，就不能称之为函数式编程语言，我们来看看百度百科对闭包的解释：\n\n> 闭包是可以包含自由（_未绑定到特定对象_）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（_局部变量_）。\n\nObjective-C中也有闭包，也就是`block`，但就语法的反人类程度就已经很令人发指了，更别说和函数指针定义在一起时，是多么令人奔溃了。也就是说`block`的设计并不简洁、优雅，这点在Swift中有了很好的改进，Swift中，已直接将它称之为**闭包**：\n\n```swift\nfunc sendRequest(url: String, response:(String) -> Void) {\n    // ...\n}\n```\n\n在Swift中，闭包的定义其实可以抽象成`() -> ()`这样的通用模式，也就是一个输入**推导出**一个输出，这是非常直观的定义方式，也更贴近其它编程语言中闭包的定义方式（_C#，Java8中的Lambda表达式_）。而在Swift中，为了更加优雅，放置在参数最后的闭包使用时可以放置到参数括号外，闭包输入参数可以用`$0、$1...`这样的方式来捕获，如下：\n\n```swift\nsendRequest(\"http://www.baidu.com\") {\n    print($0)\n}\n```\n\n这种闭包放置在参数括号外的特性，Swift将它称之为**尾随闭包**。\n\n在Swift中，和其它函数式编程语言一样，闭包更像是嵌套函数，或者称之为内部函数，Swift中所有的函数声明，都可以用闭包表达式来描述，例如：\n\n```swift\nfunc login(username: String, password: String) -> Bool {\n    //....\n}\n```\n\n用闭包表达式来描述：`(String, String) -> Bool`，**所有类型为闭包的参数，都可以用签名相同的函数来替代**，所以，先前的`sendRequest`，可以直接如下使用：\n\n```swift\nsendRequest(\"http://www.baidu.com\", response: print)\n```\n\n这便是**函数式编程**的一个精髓所在，函数不仅可以被调用，还可以将其作为参数或返回值进行传递，这可能是和**命令式编程**最大的区别了。\n\n另外在使用闭包时，由于它能捕获当前上下文中的变量，特别是对`self`而言，这很容易导致循环引用。以往在Objective-C中的常见做法是定义一个`weak`的`self`，只使用那个`weak`的`self`，但这样依然会有出错的可能，这点在Swift中也进行了改良：\n\n```swift\nsendRequest(\"http://www.baidu.com\") { [weak self] resp  -> Void  in\n    //...\n}\n```\n\n这种情况下，闭包内所有的`self`都是`weak`的，强制性的需要你进行`nil`的判断。这样的设计，使得Swift更加安全和优雅。关于安全，这正是我们接下来需要探讨的内容！\n\n\n## 类型和类型安全\n\nObjective-C是一个弱类型的语言，或者说是一个比较动态的语言，而Swift与之截然不同，Swift是一个名副其实的强类型语言。相比之下，弱类型的语言更加灵活，但更容易出错，而强类型的语言，描述性和约束性更强，也更加安全。\n\n### 类型推断\n\n类型推断是现代化编程语言的趋势，在`C#`中引入了`var`关键字，大大简化了方法和变量的定义。Swift中自然是拥有了类型推断的能力，没有类型推断的Objective-C代码如下：\n\n```objc\n- (void)doSomething {\n    OCObject *obj = [OCObject new];\n    NSString *str = [obj test:@\"hello world\"];\n}\n```\n\n由于没有类型推断，变量定义时必须要定义它所属于的类型，方法的返回值也是类似。而从某种角度来说，其实通过等号右侧完全可以推断出左侧的类型，所以在Swift中，编译器会智能的做这样的推断，可以帮我们省略下很多代码的编写：\n\n```swift\nfunc doSomething {\n    let obj = SwiftObject()\n    let str = obj.test(\"hello world\")\n}\n```\n\n当然，类型推断的好处远远不止这种形式，在泛型和闭包中，类型推断简直就是其设计的点睛之笔。而类型推断，也进一步的阐述了Swift是强类型语言，否则就不可能推断出所需类型，那么在Objective-C中常见的`unrecognized selector` Crash，在纯粹的Swift中永远不会发生。\n\n\n### 值类型\n\n值类型也是Swift中伟大的创举之一，值类型的一个显著特征便是在赋值和传递时会进行复制。为什么说Swift中值类型是一个创举呢？因为在我所经历的高级语言里，从未见过将字符串和框架内集合类型定义为值类型的，不得不说，Swift是第一个。\n\n选择值类型，往往是为了对象在多线程环境下更加安全，因为它`复制`的特性，我们需要面对的只是单个实例对象，这使得我们对代码更加可控。另外，值类型中方法如果要修改成员变量，则必须使用`mutating`修饰：\n\n```swift\nmutating func withMutableCharacters<R>(body: (inout String.CharacterView) -> R) -> R\n```\n\n这会让我们在使用或设计时，更清楚值对象的变化原因，而外界对值对象的修改也是有很大限制，考虑下面的代码：\n\n```swift\nstruct TestStruct {\n    var field1 = 3\n}\n\nfunc modifyStruct(var st: TestStruct) {\n    st.field1 = 4\n}\n\nvar st = TestStruct()\n\nmodifyStruct(st)\n\nprint(st.field1)\n```\n\n执行结果为`3`，为什么会这样？因为在进行参数传递的时候，函数体操作的只是`st`的副本，`st`在传递时进行了复制。所以，即便是将`var st = TestStruct()`改为`let st = TestStruct()`也不会有任何编译问题，这是完全合法的操作。如果的确要在函数内修改传入参数，则使用下面的方式：\n\n```swift\nfunc modifyStruct(inout st: TestStruct) {\n    st.field1 = 4\n}\n\nvar st = TestStruct()\n\nmodifyStruct(&st)\n```\n\n这与很多编程语言中的参数传递方式是类似的，也就是两种：**传引用**和**传值**，默认情况下，Swift参数的传递都是“传值”的方式，这种情况下，引用类型会多出一个指向实例内存的指针，而值类型会进行复制（_可以说，指针就是值类型_）。\n\n了解了值类型与引用类型的本质区别，那么还有很多值得去尝试的地方，比如在值类型中定义引用类型的成员，那么在该值对象的副本上修改该引用成员，依然会影响到主体。具体实践就留给在座的各位了。\n\n\n### 枚举类型\n\n在目前主流的编程语言中，枚举是非常常见的一种值类型，而大多数人对它的用法一直还停留在`C或C++`的那种形式上。枚举是什么？顾名思义，**枚举是一系列有限的状态集合**，那么涉及到状态时，我们会很自然的想到用枚举来表示。如果仅仅用来表示状态，那么枚举的使用范围就非常有限，但在实际的开发中，有很多时候，我们有些数据仅在某种状态下才具有意义，或者说，这种数据只能存在于特定状态中。比如我们做网络请求时，会有两种状态：**成功**或**失败**，而仅仅在失败时，**错误消息**这个数据才有意义。那么这时候如果使用面向对象的思维来解决，我们可能需要定义一个通用的**状态**基类，然后有两个子类来实现不同状态。但在Swift中，你有另外的选择，那就是**枚举关联值**。\n\n所谓枚举关联值，便是在枚举中的每一种状态下，都可以关联一些个数据。其实这种做法在Java中早就有了，但Java的枚举比起Swift的，还是有所不足的。我们先来看看Java的枚举：\n\n```java\npublic enum Color {\n    RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);\n\n    private String name;\n    private int index;\n\n    private Color(String name, int index) {\n        this.name = name;\n        this.index = index;\n    }\n}\n\n```\n\n可以看到，Java的枚举的确也有关联值，但数量和数值都是固定死的，它也无法解决上面我们提到的那个问题。所以，还是看看Swift是怎样解决这样的问题吧：\n\n```swift\npublic enum ResponseStatus {\n    case Success\n    case Failure(errorMessage: String)\n}\n\nlet status = ResponseStatus.Failure(errorMessage: \"网络连接中断\")\n\n// 模式匹配中的 Enumeration Pattern 哦~\nif case .Failure(let msg) = status {\n    print(msg)\n}\n\nswitch status {\ncase .Success:\n    print(\"success\")\ncase .Failure(let msg):\n    print(msg)\n}\n```\n\n是不是很酷？相当酷！这样给我们减少了一些细小类的编写，并且更加合理和直观。除了关联值之外，枚举还可以有它自己的构造函数和方法，这会给我们在设计状态相关的逻辑时提供不少的便利。除此之外，枚举还是可以定义成泛型的，这样的灵活性给了我们更大的发挥空间，所以，我们再来看看泛型！\n\n\n### 泛型\n\n泛型，这是多么激动人心的一个特性啊，不知道你是否和我一样对泛型抱有极高的期待。作为一个现代化的编程语言，怎么可以没有泛型呢？转入Objective-C之后，很多时候的设计，都卡在了泛型这块，使得我不得不多写出一些类来完成设计。虽然如今的Objective-C中加入了泛型，但依然没有达到我的预期，而Swift中的泛型，虽然还有些欠缺，却也已经是足够强大了。\n\n什么时候该用泛型呢？我总结如下：**当某种逻辑，可应用于一系列有相似点的对象，为了确保拥有强类型的特性时，则需要使用泛型**。对于这句话的理解，需要进行一些深度分析的，很多时候其实我们并不需要泛型，使用基类即可满足。聚个例子吧，当我们进行一些图形绘制程序的设计时，一个图形元素的绘制可能会抽象出这样的接口：\n\n```swift\nprotocol GraphicElement {\n    func draw(panel: GraphicPanel)\n}\n```\n\n那么在我们的绘图引擎中，绘制元素的方法应该如何定义？使用泛型么？这里其实并不适合使用泛型，因为我们没有必要保留强类型的特性，我们只关心`draw`方法，所以使用基类即可：\n\n```swift\nfunc drawElement(element: GraphicElement) {\n    element.draw(self)\n}\n```\n\n而在某些情况下，我们需要使用强类型的特性，这会使得我们代码更加简洁和安全，这时候，我们就需要使用泛型。比如，在一个通用的消息过滤模块，我们需要对消息内容进行关键字过滤，那么过滤前和过滤后的消息类型应该是一致的，这时候，我们就需要保留强类型的特性，所以，要使用泛型：\n\n```swift\nclass Message {\n    let content: String\n\n    init(content: String) {\n        self.content = content\n    }\n}\n\nclass GroupMessage : Message {\n    private(set) var groupId: Int\n\n    init(id: Int, content: String) {\n        self.groupId = id\n        super.init(content: content)\n    }\n}\n\nfunc filterMessage<T: Message>(message: T) -> T {\n    // ... filter \n    return message\n}\n\nvar message = GroupMessage(id: 12, content: \"hello world\")\nmessage  = filterMessage(message)\n```\n\n请时刻记住泛型的使用场景，避免没必要的泛型设计。在Swift中，目前泛型还是有欠缺的，少了`逆变`和`协变`的支持，而在某些场景下，这是必须的。相信在不久的将来，这个特性会被弥补上来的，毕竟，Objective-C中已经有了这样的支持，虽然不尽人意。\n\n逆变和协变，不仅体现在泛型上，在继承链中的方法覆写上，也有应用。而很多人对这样的概念仍是一知半解，甚至陷入了错误的认知，希望在这里可以帮助大家真正理解它的适用场景。最基本的概念如下：\n\n* **逆变**：父类可以替代子类\n* **协变**：子类可以替代父类\n\n为什么会有这两种概念存在？其实最根本的原因还是为了类型安全，在`C#`的语法设计中，对于数组默认是允许协变的，这样导致存在安全隐患，这也是`C#`为数不多的设计缺陷之一。考虑下面的`C#`代码：\n\n```c#\nclass Super { }\n\nclass Sub : Super {\n\tpublic void test() { }\n}\n\npublic static void Main(string[] args) {\n\tvar subs = new Sub[3];\n\tsubs[0] = new Sub();\n\tsubs[1] = new Sub();\n\t\n\tSuper[] supers = subs;   // 协变\n\tsupers[1] = new Super();\n\t\n\t// 这里会崩溃掉，抛出 ArrayTypeMismatchException\n\tsubs[1].test(); \n}\n```\n\n可以说，这种设计是很糟糕的，因为它没有保证到类型的安全，我们明明声明的是一个`Sub`的数组，里面却可以混入一个不是`Sub`的类型，这便是**协变的陷阱**，相同的问题在Objective-C和Java中同样存在（_Java中会抛出ArrayStoreException异常_）。而在Swift中，如下的代码：\n\n```swift\nclass Super {}\n\nclass Sub : Super {\n    func test() {}\n}\n\nvar subs = [Sub]()\nsubs.append(Sub())\nsubs.append(Sub())\n\nvar supers: [Super] = subs\n\nsupers[1] = Super()\nsubs[1].test()\n```\n\n这样的代码是不会出现任何问题的，因为在Swift中，`Array`是值类型，`supers[1] = Super()`只是对副本的修改，并不会影响到`subs`。这样的协变特性，目前只有系统库能享有，我们自己定义泛型是无法做到的，但，从安全性的角度来说，值类型的泛型应该默认支持协变，这是没有任何副作用的。\n\n协变和逆变的另一个使用场景，便是方法参数和返回值的约束，**参数和返回值应该是可协变的，而闭包中的参数应该是可逆变的**，请好好的理解我说的这句话，加以实践，你会明白这其间的道理。关于泛型，也就说到这里，更多内容还需大家自己去领悟，接下来，我们看看更多有意思的东西！\n\n\n### 元组类型\n\n似乎所有的函数式编程语言里都有元组类型，包括`C#`这种命令式编程语言里也引入了元组，其实元组是很简单的东西，但在Swift中却尤为重要。**元组类型可以看作是一种有序字典**，在编程语言中，所有的`Plain Object`都是可以用字典来表示，只是使用起来不是很便利。而，元组是一种表现力更强，使用起来更方便的`Plain Object`。\n\n什么时候适合使用元组？大体在下面几种情况下：\n\n1. 多返回值的函数里\n2. 用于临时的数据传输对象（_DTO_）\n\n```swift\nfunc mutilReturn() -> (String, String) {\n    return (\"Hello\", \"World\")\n}\n\nfunc tempDTO() {\n    var cellSummary: (id: Int, display: String)\n    cellSummary.id = 1\n    cellSummary.display = \"hello world\"\n\n    print(cellSummary)\n}\n```\n\n元组在面对这种有意义但又很小的简单对象时非常有用，可以帮我们减少很多细小类的编写，**需要注意的是，元组是值对象**，所以它拥有所有值对象的特性。另外，**Swift中，所有的变量定义都是一个一元组**，可以通过下面的代码验证：\n\n```swift\nlet i = 456\nlet i2: Int = 566\n\n// 通过下标访问元组项\nprint(i.0.0.0.0)\nprint(i2.0.0.0.0)\n```\n\n这种设计可以让元组类型和普通的值类型进行平滑过渡，所以`Type`和`(Type)`在Swift中是等同的，考虑下面的代码：\n\n```swift\nclass Item {\n    let value: Int\n    init(_ value: Int) {\n        self.value = value\n    }\n}\n\n// 一元组数组\nvar array: [(Item)] = [(Item(1)), (Item(2)),Item(3), Item(4), Item(5)];\n\nfunc test(i: Item) {\n    print(i.value)\n}\n\ntest(array[0])\n```\n\n上面的代码是没有任何问题的，所以，在Swift中，元组是一等公民，也可以说，只要你使用了Swift，你就已经在使用元组了。\n\n\n### 嵌套类型\n\n嵌套类型也是Swift中靠近现代化语言的重要一步，各种主流高级设计语言中，对嵌套类型的定义都有细微区别。比如，Java中的成员内部类其实就是一个闭包，而静态内部类才是和Swift内部类类似的存在。不过，**嵌套类型的设计，基本都是为了提供更严格的访问控制，和隔离实现**。除此之外，由于Swift中没有名称空间（_Name Space_）和包（_Package_），只有模块（_Module_）的概念，嵌套类型也常用来组织一系列相关的类，用以类更精细化的管理。参考下面这样一段代码：\n\n```swift\nprotocol GraphicElement {\n    func draw()\n}\n\nfinal class GraphicElementFactory {\n\n    class func createElement(text: String) -> GraphicElement {\n        return TextGraphicElement(text: text)\n    }\n\n    private class TextGraphicElement: GraphicElement {\n        private let text: String\n\n        private init(text: String) {\n            self.text = text\n        }\n\n        private func draw() {\n            print(self.text)\n        }\n    }\n}\n\nlet element = GraphicElementFactory.createElement(\"hello world\")\nelement.draw()\n```\n\n上面的示例，我们通过嵌套类来对外屏蔽实现细节，从面向对象的角度来考虑，这提供了良好的封装性，约束了使用者必须通过某种唯一途径来获得接口的实例。考虑下Foundation中的类簇，这种更严格的访问控制使得我们能设计出对客户代码侵入性更小的类库，减少使用者对某些他们并不关心类的困惑。\n\n### 安全的覆写\n\n最后稍微提及一下Swift在`override`上的改进，也就是面向对象中的覆写。这一点在Objective-C中简直是糟透了，因为当你继承一个类时，一不小心你就可能覆写掉了父类的某个私有方法，结果当然是你无法预计的。所以，为了防止这样的情况出现，我们会在私有方法命名前加上一些毫无意义的标识，这对追求优雅的人来说，是极度痛苦的（_有段时间我一直在比较，究竟用几个下划线比较好看_）。好在Swift里对此做出了很好的改进，**如果子类要覆写父类中的方法，那么必须使用`override`关键字，如果子类中出现了与父类签名相同的方法，并且没有标记`override`则编译不会通过**。这很棒！不是么？编译器向我们保证了继承链中不会存在意外覆写的状况，又为我们减少了一个可能会掉入的坑，所以，现在的程序员，真是太幸福了。\n\n```swift\nclass Foo {\n    func foo() {\n        print(\"foo\")\n    }\n}\n\nclass Bar : Foo  {\n    func foo() { // 编译不通过\n\n    }\n}\n```\n\n\n## 重新定义函数\n\n众所周知，Swift是一个支持函数式编程的语言，所以在函数这块与传统的命令式编程有较大的区别。首先，我们要搞清楚，什么是**函数**，什么是**方法**？函数是统称，而方法是主体的行为，也就是定义在类或其它主体中的函数。\n\n### 高阶函数\n\n在函数式编程里，我们不得不说说高阶函数，这是函数式与命令式最大的区别。在函数式编程里，函数是可以做为函数的输入参数和返回值，而**高阶函数便是参数或返回值中有函数的函数**。Swift中的高阶函数定义使用的是闭包表达式，这在闭包的章节里已经有所提及，参看下面这个高阶函数：\n\n```swift\npublic extension Array {\n    public func select<T>(trans: (Element) -> T) -> [T] {\n        var result = [T]()\n        for ele in self {\n            result.append(trans(ele))\n        }\n        return result\n    }\n}\n\nfunc translateInt(i: Int) -> String {\n    return \"\\(i)\"\n}\n\nlet array = [1, 2, 3, 4, 5]\nlet strArray = array.select(translateInt)\n\nprint(strArray)\n```\n\n上面`Array`扩展中的`select`方法便是一个高阶函数，因为它接受一个方法参数，当然，我们也可以用闭包直接代替。高阶函数的使用，可以简化一些算法的实现，并且能有效的减少一些多余的中间变量。也因为有高阶函数的存在，使得函数和普通变量站在了同等的地位，这是函数式编程很大的特点。在其它的函数式编程语言中，还会有一些更加高级的函数式特性，相信在不久的将来，这些特性也都会加入到Swift中，参考下面`F#`的一段代码：\n\n```fsharp\nlet pa f x = (f (x - 1.0), f (x + 1.0))\nlet g1 x y = x ** y\nlet h = pa g1 2.0 // 函数的局部应用\n```\n\n\n### 函数参数\n\n谈到函数，那不得不说说它的参数了，这也是Swift区别与很多其它语言的地方。在古老的Objective-C中，方法的参数命名与其它同等级语言差别是巨大的，虽然褒贬不一，但不得不说，相比于Java或C#，它的可读性是最强的。苹果似乎一直想要保持这种的`代码即文档`的作风，所以在Swift中保留了这样类似的特性，并且对它做了简化，对比一下定义即可：\n\n**Objective-C**：\n\n```objc\n- (BOOL)loginWithUsername:(NSString *)username password:(NSString *)password;\n```\n\n**Swift**：\n\n```swift\nfunc loginWithUsername(username: String, password: String) -> Bool\n```\n\n算一算，一共帮你省略了多少字符，这对保护你珍贵Mac键盘还是很有好处的！另外与参数话题相关的，就是**参数默认值**了，因为Swift参数是携有命名的特性，所以参数的默认值并不像其它语言中那样必须放置在最后的几个参数，这又让Swift能对自己拥有命名参数而引以为豪了：\n\n```swift\n// 放置在第一位的默认值\nfunc loginWithUsername(username: String = \"admin\", password: String) -> Bool {\n    return true\n}\n```\n\n然后要说的便是**可变参数列表**了，在Objective-C中也有可变参数列表，比如`NSLog`中后续的参数，但是，在不进行任何文档查阅和网络搜索的情况下，你能默写出来么？我觉得大多数人都写不出来，而在Swift中，这种情况得以改变，可变参数列表直接与数组使用类似：\n\n```swift\nfunc Log(format: String, args: String ...) {\n    for arg in args {\n        print(arg)\n    }\n}\n```\n\n上面代码片段中的`args`，其实就是一个类似与数组的参数，这比起Objective-C中的使用要简单的很多，也与其它编程语言中类似。\n\n\n### 自定义操作符\n\n自定义操作符是一个非常酷的特性，它可以帮我们**将一些嵌套调用的代码变得更加清晰**，在Swift中，操作符其实就是一个特定的函数，这也是与众多函数式编程语言保持一致的地方。假设我们要做一个图片滤镜的程序，也就是说，可以对图片应用各种滤镜效果，那么应该有以下这样类似的代码：\n\n```swift\nclass Image {\n    var filterNames = [String]()\n}\n\nprotocol ImageFilter {\n    func apply(image: Image) -> Image\n}\n\nclass GrayFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"gray\")\n        return image\n    }\n}\n\nclass BlurFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"blur\")\n        return image\n    }\n}\n\nclass ContrastFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"contrast\")\n        return image\n    }\n}\n```\n\n当我们要对图片应用滤镜时，则可能会写出类似下面这样的嵌套调用：\n\n```swift\nlet image = Image()\n\nlet gray = GrayFilter()\nlet blur = BlurFilter()\nlet contrast = ContrastFilter()\n\ncontrast.apply(blur.apply(gray.apply(image)))\n```\n\n这时候，我们可以用自定义操作符来解开这样的嵌套，类似下面代码：\n\n```swift\ninfix operator |> { associativity left precedence 140 }\n\nfunc |> (left: Image, right: ImageFilter) -> Image {\n    return right.apply(left)\n}\n\nlet outputImage = image |> gray |> blur |> contrast\nprint(outputImage.filterNames)\n\n```\n\n通过自定义`|>`这样一个操作符，我们使用者的代码表述性变得更强，也将相关性的处理放置在了同一条语句里。这种感觉是不是非常棒？似乎已经看到你们在YY一些奇怪的操作符了。关于自定义操作符的语法，这里简单的说明下：\n\n```swift\ninfix operator |> { associativity left precedence 140 }\n\ninfix\t\t\t: 代表操作符类型，可以为 prefix(前置) infix(中置) postfix(后置)\noperator\t\t: 固定关键字\n|>\t\t\t\t: 要定义的操作符\nassociativity\t: 可以为 left right none，表示当两个同等优先级的中置操作符出现时，优先使用哪个。如果为 none 则不能将操作符连接。\nprecedence\t: 操作符的优先级，值越大，优先级越高，+ 的优先级为 140\n```\n\n介绍完操作符，函数这块的内容应该也可以告一段落了，接下来介绍下属性相关的特性！\n\n\n## 强大的属性\n\n属性在面向对象的设计中，也是非常重要的一个概念，属性是对对象某种状态值的抽象，比如颜色、大小、重量等。在Objective-C中，属性又称之为自动合成属性，因为是编译器将**设置**和**获取**方法，按照属性的关键字进行自动合成的。这种方式在其它语言里也很常见，比如C#的属性也是类似，可以通过反射获取到单独的设置和获取方法。Swift中的属性也是传承了Objective-C属性的一些特性，并做了一些调整，比如去除了原子性描述，由于目前并没有太多关于Swift运行时的文档，也没有做一些关于这方面的Hack，所以原理性的东西这边就不提及了。\n\n\n### 延时属性\n\n在Objective-C中，我们可以手动的实现一个延时属性，也就是只有当属性第一次被调用时，才真正的去构建属性的实例。这种特性在Swift中，已经在语法层级得到了支持，这样对**处理一些占用内存较大，但又不是很常用的属性**时，能有效的降低内存使用率。下面是在Objective-C中实现延时属性的代码：\n\n```objc\n@interface DataManager : NSObject\n\n@property (nonatomic, strong, readonly) NSData *data;\n\n@end\n\n@implementation DataManager\n\n@synthesize data = _data;\n\n- (NSData *)data {\n    if (_data == nil) {\n        _data = [NSData dataWithContentsOfFile:@\"a/big/file\"];\n    }\n    return _data;\n}\n\n@end\n```\n\n上面的写法虽然代码量不大，但毕竟会增加工作量，另外这种写法在多线程环境中并不严谨，如果再加上线程互斥的代码，整个延时属性的实现就会有更多的代码量和复杂度。所以，在Swift中，多线程并发的这种需求完全由编译器来保证，那么，我们实现这个延时属性，使用下面的代码即可：\n\n```swift\nclass DataManager {\n    lazy private(set) var data: NSData = NSData(contentsOfFile: \"a/big/file\")!\n}\n```\n\nBingo！！这样的特性太棒了，为我们省略了不少工作量啊！\n\n\n### 属性监听\n\n属性监听也是Swift中从语法层级支持的特性，当然，没有语法层级的支持，我们也可以手动撸出同样效果的代码，但总归是麻烦了点。首先我们要区别`KVO`和属性监听的区别，`KVO`是对其它对象属性的变化进行监听，而属性监听是对自身属性的变化进行监听。在语法层支持属性监听，使得我们可以将属性的存储逻辑和监听逻辑分离，这会使得我们代码结构更加清晰。\n\n```swift\nclass StepCounter {\n\n    var step: Int = 0 {\n        willSet(newValue) {\n            print(\"new value \\(newValue)\")\n        }\n\n        didSet {\n            print(\"old value \\(oldValue)\")\n        }\n    }\n}\n\nvar stepCounter = StepCounter()\nstepCounter.step = 200\nstepCounter.step = 201\n\n// new value 200\n// old value 0\n// new value 201\n// old value 200\n```\n\n在属性监听代码块里，我们可以获取到新设定的值和原始的值，而且这个块中的操作是线程安全的。所以，我们是可以在这个块里，**做一些与属性值相关的策略逻辑**，比如只在特定某些值下触发的逻辑。\n\n\n### 下标\n\n下标在Objective-C中是使用非正式协议的方式实现的，但对下标类型有所限制，而在Swift中对下标类型和数量是没有什么限制的，并且下标是支持**重载**的。这又给了我们创造的空间，比如用字符串或索引来取自定义配置文件中的值：\n\n```swift\nclass ConfigurationFile {\n\n    subscript(key: String) -> String {\n        get {\n            return \"hello\"\n        }\n    }\n\n    subscript(index: Int) -> String {\n        get {\n            return \"world\"\n        }\n    }\n}\n\nlet config = ConfigurationFile()\n\nprint(config[\"a key\"] + \" \" + config[1])\n```\n\n下标主要是适用场景是**需要一种能通过索引快速取值**设计，它和属性非常相似，所以将其归类到了属性这一块。\n\n\n## 运行时的安全\n\n前面谈过了类型安全，这里再简单谈谈Swift在运行时是如何处理异常的。与很多传统的编程语言一样，Swift引入了`try - catch`机制，在Objective-C中也有`try`和`catch`，但与其它语言中的不同，Objective-C的异常处理在内存管理上存在泄露的风险。所以我们一直都在用`NSError`这样的错误处理模型，苹果提供的类库中也都采取了这样的处理方式，而在Swift中，这点得以改进，Swift中的`throws`函数必须用`try`去调用，所以很容易在ARC环境下生成`retain`和`release`代码，所以再也不用当心内存泄露的问题了。\n\n在Swift中，所有可以抛出的异常，必须实现`ErrorType`协议，当然`NSError`实现了这样的协议。而如果我们要自定义异常，则必须使用枚举类型，原因很简单，因为枚举配合它的关联值特别适合做这样的事情：\n\n```swift\nenum LoginError: ErrorType {\n    case InvalidUsername, InvalidPassword\n    case Other(String)\n}\n\nfunc login(username: String, password: String) throws -> Int {\n    if username != \"makee\" {\n        throw LoginError.InvalidUsername\n    } else if password != \"sun\" {\n        throw LoginError.InvalidPassword\n    } else {\n        throw LoginError.Other(\"unknow error\")\n    }\n}\n\ndo {\n    try login(\"makee\", password: \"sun\")\n} catch LoginError.InvalidUsername {\n    // ...\n} catch LoginError.InvalidPassword {\n    // ...\n} catch LoginError.Other(let msg) {\n    print(msg)\n}\n```\n\n当然，如果确定没有任何异常，我们只要使用`try!`去调用即可，这样可以省略掉`do - cacth`这样的代码结构。\n\n```swift\ntry! login(\"username\", password: \"password\")\n```\n\n这时候需要注意，就和可选类型的强制解包一样，如果失败了是会导致Crash的。Swift引入了这样的异常处理机制，虽然在语法的角度上与其它语言大相径庭，但如果从ARC的角度去考虑，就会觉得，这不失为一种很好的妥协。比较Swift没有垃圾回收机制，所有的内存管理都是靠程序本身去处理，有了这样的异常处理机制，我们应该更少的使用`nil`，这样我们的程序会更加健壮。\n\n与Java的异常处理类似，Swift中的异常处理也存在**冒泡机制**，也就是异常向上传递，这种特性使得我们的异常是可传递的，但为了内存管理考虑，还是必须要使用上`try`关键字。比如下面的代码：\n\n```swift\nfunc test() throws {\n   try login(\"usr\", password: \"pwd\")\n}\n```\n\n这时候，调用`test`函数时，异常是从`login`冒上来的，这就是异常传递机制。通过这样的设定，我们不会忽略掉任何异常，配合**模式匹配**中所讲述的内容，我们的`catch`块可控性也是非常灵活的。唯一不足的是，并不能像Java那样知道到底会抛出何种异常，这点和`C#`中倒是有点类似，也只能靠文档来弥补了。\n\n\n## 最后再说一点\n\n作为单篇文章，本次所讲述的内容可能有点过多，因为我觉得Swift真的有太多比Objective-C强大的地方，也非常愿意作为Swift的传道士。碍于篇幅，这篇文章中还有很多Swift的小特性没有提及，比如表达式的`where`子句，枚举类型的`rawValue`等，这些就留给在座各位自己去摸索了。\n\n本篇文章中，我想要达到的目的并不仅仅是让在座各位了解到Swift的特性，更希望能让大家明白在什么场景下去使用这样的特性。所以文章中花了很大的篇幅描述使用场景和我认为的设计初衷，语法细节都是很简单的略过了，因为语法是很容易从官方文档中找到说明的，而使用场景和相应的一些思想是很难从文档上找到的。\n\n那么，本篇就到这里了，希望大家能够有所收获，**一同学习，成就更好的自己**！","source":"_posts/take-you-to-learn-swift-feng-sao.md","raw":"title: 带你领略 Swift 的风骚\ndate: 2016-2-24 16:26:13\ntoc: true\ntags: Swift\ncategories: iOS开发\n---\n\n`Swift`，已经出来一年多了，想必不少人都曾对它抱着观望的态度，如果现在的你还是这样的态度，那么是时候去改变了。作为一个年龄比我还大的语言————`Objective-C`，是时候淡出历史的舞台了，有人说`Objective-C`和`Swift`会并存，但我觉得，短期内会这样，从长远的角度来看，并存的可能性并不大。毕竟，它们不是`C`和`C++`这样的关系，它们更像`Delphi`与`C#`这样的存在。从可维护的角度来说，并存的代价比较大，所以，对于`Objective-C`，放手吧。\n\n<!--more-->\n\n作为一个绝对现代化的编程语言，Swift集合了当下众多流行语言的特性，这与保守的`Objective-C`产生了鲜明的对比。如果你还在犹豫踌躇中，那么就让本文带你领略下新欢的风骚，这一切，你值得拥有！\n\n\n## 不得不说的简洁和优雅\n\n谈到Swift，不得不把它的优雅放在第一位，作为一门现代化的编程语言，优雅是它必备的特质，那么什么是**优雅**？所谓优雅就是在书写或阅读时，有种简单自然、一气呵成的感觉，不罗嗦、不做作，这是语法上的优雅，而设计中的优雅，又何尝不是这样？\n\n\n### 声明和实现的合并\n\n这可能是Swift向现代化语言看齐的第一步，在很多传统的编程语言里，例如C++、Pascal、Objective-C，类或方法的声明与实现是分离开的。当然C++是可以在头文件里直接实现内联方法，但这很不自然，也不安全，因为它会暴露给最终用户。\n\n以往声明和实现的分离，其实更像是`接口定义`与`接口实现`，但这种强制性的设定给使用者也会带来一些麻烦。就拿Objective-C来说，如果我要定义一个私有类，则会写在“.m”文件中，但这时候又不得不将声明也书写一遍，这是没有太多意义的；又比如，我一个简单到只有属性的`PONSO`，还不得不将一个空的实现书写一遍（_请抛开自动属性这些用户不需要知道的细节_）。\n\n任何一门现代化的编程语言，都摈弃了这种分离的方式，其原因是为了追求更加的简洁和优雅。而在这种合并的方式下，也迫使我们不会将一个类写得特别庞大，以前的团队合作中，大家只会看你的头文件，而现在，更多的是看你具体的代码实现了（_无疑，这也是一种Code Review_）。\n\n\n### 扩展（Extension）\n\n扩展，这也是Swift中非常有特色的设计，也是苹果编程语言的一贯传承。Swift中的扩展，其实是对Objective-C中`Category`和`Extension`的合并，在Objective-C中，我们会书写类似下面的代码：\n\n```objc\n@interface OCObject : NSObject\n@end\n\n@interface OCObject (Category) <NSCoding>\n@end\n```\n\n对比Swift，如下：\n\n```swift\nclass SwiftObject { }\n\nextension SwiftObject: NSCoding { }\n```\n\n扩展主要可应用于以下场景：\n\n1. 对原有类增加新协议适配，新方法\n2. 对实现代码按逻辑块进行划分（_比如按实现的协议划分_）\n\n在我所接触的其它语言里，也有扩展一说，比如C#，但C#的扩展其实完全只是语法糖，而Objective-C或Swift中的扩展，并不仅仅是语法上的便利，更有运行时的支持，考虑下面代码：\n\n```swift\nprotocol SwiftProtocol { }\n\nclass SwiftClass { }\n\nextension SwiftClass: SwiftProtocol { }\n\nlet swiftObject = SwiftClass()\n\nprint(swiftObject is SwiftProtocol)\n// print: true\n```\n\n不得不说，扩展对代码的优雅性上，也给出了不少的支援，相比于一个实现了N多协议的类，我们用`extension`进行划分会清晰很多。\n\n\n### 可选类型和可选链\n\n可选类型，也就是在一个类型的定以后，增加一个`?`号，代表这个变量可以为`nil`。这也是Swift相对于Objective-C的一个重大改进，使得代码更加安全，表述性更强。但，需要注意的是，这并不是Swifit特有的，在.Net平台中，可选类型也是非常常见的。对于以下的Objective-C代码：\n\n```objc\n- (NSString *)userAddress:(HJUser *)user {\n    if (user == nil) return nil;\n    if (user.city == nil) return nil;\n    if (user.street == nil) return nil;\n\n    return [NSString stringWithFormat:@\"%@%@\", user.city, user.street];\n}\n```\n\n从使用者的角度来说，我们必须要判断返回值，因为我们根本不确定是否会返回`nil`；而从设计者的角度来说，我们也很头疼，我们也不知道调皮的用户到底会给我们传入什么。而`__nonnull`这样的标示，根本就无法阻止这样的行为：\n\n```objc\n- (NSString * __nonnull)test:(NSString * __nonnull)arg {\n    return nil;\n}\n```\n\n这段代码在Xcode 7 beta2中编译，没有任何错误和警告。想一想上面的那段`userAddress `代码，其实我们很确定，如果传入的参数为空或者其属性为空，则返回值肯定为空；而对方法的设计而言，参数为空是没有任何意义的，我们应该让使用者保证他传入的参数是不能为`nil`的，而不是在两端都对`nil`进行判定，这无疑增加了复杂度（_三个方面：设计、使用、调试_），也不合理。所以，在Swift中对其进行改善：\n\n```swift\nfunc getUserAddress(user: HJUser) -> String {\n    return user.city + user.street\n}\n```\n\n我们可以安全的调用上面的方法，并不需要多余的`nil`判断，那么可选类型应该应用于什么场景呢？**可选类型，应该应用于某个变量、参数或返回值，存在空或非空两种合理的状态下**。也就是说它可以为空，也可以不为空，并且，从逻辑的角度考虑很合理。比如，下面的代码：\n\n```swift\nfunc findUser(username: String) -> HJUser? {\n    // 如果找到了则返回\n    // 否则返回nil\n    return nil\n}\n```\n\n从逻辑的角度考虑，我们查找数据，有两种结果：找到和没有找到，这样的场景下就特别适合使用可选类型。那么配合可选链，我们的代码会非常简洁和优雅：\n\n```swift\nfunc findUserRealName(username: String) -> String? {\n    return findUser(username)?.info?.realName\n}\n```\n\n\n### 模式匹配（Patterns）\n\n模式匹配，是函数式编程里非常常见的一个特性，这也和语言的优雅性息息相关，在Swift中，大概有以下几种模式匹配：\n\n1. 通配符（Wildcard Pattern）\n2. 标识符（Identifier Pattern）\n3. 值绑定（Value-Binding Pattern）\n4. 元组（Tuple Pattern）\n5. 枚举（Enumeration Case Pattern）\n6. 可选（Optional Pattern）\n7. 类型转换（Type-Casting Pattern）\n8. 表达式（Expression Pattern）\n\n关于模式匹配，下面的代码进行了很好的阐述：\n\n```swift\n// Identifier Pattern\nlet points: [(Int, Int)?] = [(0, 0), (1, 1), nil, (3, 3)]\n\nif case .Some(let p) = points[0] {  // Enumeration Pattern\n    print(p)\n}\n\nif let p = points[0] { // Identifier Pattern\n   print(p)\n}\n\nfor case let point? in points {  // Optional Pattern\n\n    let (x, _) = point  // Tuple Pattern\n    print(x)\n\n    switch point {\n    case (0, 0):        // Expression Pattern\n        print(\"0, 0\")\n    case let (1, y):    // Value-Binding Pattern\n        print(y)\n    case _:             // Wildcard Pattern\n        print(\"Wildcard Pattern\")\n    }\n}\n```\n\n对于模式匹配的深入理解，有助于对Swift的阅读，也有助于编写出更加简洁优雅的代码。anyway，只要记住，**模式匹配是一种类似于正则表达式的捕获规则**，比如通配符`_`可以捕获任何值，`(x, y)`只能捕获二元组，`(0, y)`只能匹配以0为第一元的二元组，可选和枚举也类似。从抽象的角度来说，所有的模式匹配，都有以下特质：\n\n* 需要有一个输入与之进行匹配测试\n* 匹配结果有两种：成功或失败\n* 匹配成功时，可捕获所匹配到的值\n\nThat's cool！感受下，如果没有这些便捷的模式匹配，用传统的条件分支语句，会写成怎样？\n\n### 闭包（Closure）\n\n没有闭包的编程语言，就不能称之为函数式编程语言，我们来看看百度百科对闭包的解释：\n\n> 闭包是可以包含自由（_未绑定到特定对象_）变量的代码块；这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（_局部变量_）。\n\nObjective-C中也有闭包，也就是`block`，但就语法的反人类程度就已经很令人发指了，更别说和函数指针定义在一起时，是多么令人奔溃了。也就是说`block`的设计并不简洁、优雅，这点在Swift中有了很好的改进，Swift中，已直接将它称之为**闭包**：\n\n```swift\nfunc sendRequest(url: String, response:(String) -> Void) {\n    // ...\n}\n```\n\n在Swift中，闭包的定义其实可以抽象成`() -> ()`这样的通用模式，也就是一个输入**推导出**一个输出，这是非常直观的定义方式，也更贴近其它编程语言中闭包的定义方式（_C#，Java8中的Lambda表达式_）。而在Swift中，为了更加优雅，放置在参数最后的闭包使用时可以放置到参数括号外，闭包输入参数可以用`$0、$1...`这样的方式来捕获，如下：\n\n```swift\nsendRequest(\"http://www.baidu.com\") {\n    print($0)\n}\n```\n\n这种闭包放置在参数括号外的特性，Swift将它称之为**尾随闭包**。\n\n在Swift中，和其它函数式编程语言一样，闭包更像是嵌套函数，或者称之为内部函数，Swift中所有的函数声明，都可以用闭包表达式来描述，例如：\n\n```swift\nfunc login(username: String, password: String) -> Bool {\n    //....\n}\n```\n\n用闭包表达式来描述：`(String, String) -> Bool`，**所有类型为闭包的参数，都可以用签名相同的函数来替代**，所以，先前的`sendRequest`，可以直接如下使用：\n\n```swift\nsendRequest(\"http://www.baidu.com\", response: print)\n```\n\n这便是**函数式编程**的一个精髓所在，函数不仅可以被调用，还可以将其作为参数或返回值进行传递，这可能是和**命令式编程**最大的区别了。\n\n另外在使用闭包时，由于它能捕获当前上下文中的变量，特别是对`self`而言，这很容易导致循环引用。以往在Objective-C中的常见做法是定义一个`weak`的`self`，只使用那个`weak`的`self`，但这样依然会有出错的可能，这点在Swift中也进行了改良：\n\n```swift\nsendRequest(\"http://www.baidu.com\") { [weak self] resp  -> Void  in\n    //...\n}\n```\n\n这种情况下，闭包内所有的`self`都是`weak`的，强制性的需要你进行`nil`的判断。这样的设计，使得Swift更加安全和优雅。关于安全，这正是我们接下来需要探讨的内容！\n\n\n## 类型和类型安全\n\nObjective-C是一个弱类型的语言，或者说是一个比较动态的语言，而Swift与之截然不同，Swift是一个名副其实的强类型语言。相比之下，弱类型的语言更加灵活，但更容易出错，而强类型的语言，描述性和约束性更强，也更加安全。\n\n### 类型推断\n\n类型推断是现代化编程语言的趋势，在`C#`中引入了`var`关键字，大大简化了方法和变量的定义。Swift中自然是拥有了类型推断的能力，没有类型推断的Objective-C代码如下：\n\n```objc\n- (void)doSomething {\n    OCObject *obj = [OCObject new];\n    NSString *str = [obj test:@\"hello world\"];\n}\n```\n\n由于没有类型推断，变量定义时必须要定义它所属于的类型，方法的返回值也是类似。而从某种角度来说，其实通过等号右侧完全可以推断出左侧的类型，所以在Swift中，编译器会智能的做这样的推断，可以帮我们省略下很多代码的编写：\n\n```swift\nfunc doSomething {\n    let obj = SwiftObject()\n    let str = obj.test(\"hello world\")\n}\n```\n\n当然，类型推断的好处远远不止这种形式，在泛型和闭包中，类型推断简直就是其设计的点睛之笔。而类型推断，也进一步的阐述了Swift是强类型语言，否则就不可能推断出所需类型，那么在Objective-C中常见的`unrecognized selector` Crash，在纯粹的Swift中永远不会发生。\n\n\n### 值类型\n\n值类型也是Swift中伟大的创举之一，值类型的一个显著特征便是在赋值和传递时会进行复制。为什么说Swift中值类型是一个创举呢？因为在我所经历的高级语言里，从未见过将字符串和框架内集合类型定义为值类型的，不得不说，Swift是第一个。\n\n选择值类型，往往是为了对象在多线程环境下更加安全，因为它`复制`的特性，我们需要面对的只是单个实例对象，这使得我们对代码更加可控。另外，值类型中方法如果要修改成员变量，则必须使用`mutating`修饰：\n\n```swift\nmutating func withMutableCharacters<R>(body: (inout String.CharacterView) -> R) -> R\n```\n\n这会让我们在使用或设计时，更清楚值对象的变化原因，而外界对值对象的修改也是有很大限制，考虑下面的代码：\n\n```swift\nstruct TestStruct {\n    var field1 = 3\n}\n\nfunc modifyStruct(var st: TestStruct) {\n    st.field1 = 4\n}\n\nvar st = TestStruct()\n\nmodifyStruct(st)\n\nprint(st.field1)\n```\n\n执行结果为`3`，为什么会这样？因为在进行参数传递的时候，函数体操作的只是`st`的副本，`st`在传递时进行了复制。所以，即便是将`var st = TestStruct()`改为`let st = TestStruct()`也不会有任何编译问题，这是完全合法的操作。如果的确要在函数内修改传入参数，则使用下面的方式：\n\n```swift\nfunc modifyStruct(inout st: TestStruct) {\n    st.field1 = 4\n}\n\nvar st = TestStruct()\n\nmodifyStruct(&st)\n```\n\n这与很多编程语言中的参数传递方式是类似的，也就是两种：**传引用**和**传值**，默认情况下，Swift参数的传递都是“传值”的方式，这种情况下，引用类型会多出一个指向实例内存的指针，而值类型会进行复制（_可以说，指针就是值类型_）。\n\n了解了值类型与引用类型的本质区别，那么还有很多值得去尝试的地方，比如在值类型中定义引用类型的成员，那么在该值对象的副本上修改该引用成员，依然会影响到主体。具体实践就留给在座的各位了。\n\n\n### 枚举类型\n\n在目前主流的编程语言中，枚举是非常常见的一种值类型，而大多数人对它的用法一直还停留在`C或C++`的那种形式上。枚举是什么？顾名思义，**枚举是一系列有限的状态集合**，那么涉及到状态时，我们会很自然的想到用枚举来表示。如果仅仅用来表示状态，那么枚举的使用范围就非常有限，但在实际的开发中，有很多时候，我们有些数据仅在某种状态下才具有意义，或者说，这种数据只能存在于特定状态中。比如我们做网络请求时，会有两种状态：**成功**或**失败**，而仅仅在失败时，**错误消息**这个数据才有意义。那么这时候如果使用面向对象的思维来解决，我们可能需要定义一个通用的**状态**基类，然后有两个子类来实现不同状态。但在Swift中，你有另外的选择，那就是**枚举关联值**。\n\n所谓枚举关联值，便是在枚举中的每一种状态下，都可以关联一些个数据。其实这种做法在Java中早就有了，但Java的枚举比起Swift的，还是有所不足的。我们先来看看Java的枚举：\n\n```java\npublic enum Color {\n    RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);\n\n    private String name;\n    private int index;\n\n    private Color(String name, int index) {\n        this.name = name;\n        this.index = index;\n    }\n}\n\n```\n\n可以看到，Java的枚举的确也有关联值，但数量和数值都是固定死的，它也无法解决上面我们提到的那个问题。所以，还是看看Swift是怎样解决这样的问题吧：\n\n```swift\npublic enum ResponseStatus {\n    case Success\n    case Failure(errorMessage: String)\n}\n\nlet status = ResponseStatus.Failure(errorMessage: \"网络连接中断\")\n\n// 模式匹配中的 Enumeration Pattern 哦~\nif case .Failure(let msg) = status {\n    print(msg)\n}\n\nswitch status {\ncase .Success:\n    print(\"success\")\ncase .Failure(let msg):\n    print(msg)\n}\n```\n\n是不是很酷？相当酷！这样给我们减少了一些细小类的编写，并且更加合理和直观。除了关联值之外，枚举还可以有它自己的构造函数和方法，这会给我们在设计状态相关的逻辑时提供不少的便利。除此之外，枚举还是可以定义成泛型的，这样的灵活性给了我们更大的发挥空间，所以，我们再来看看泛型！\n\n\n### 泛型\n\n泛型，这是多么激动人心的一个特性啊，不知道你是否和我一样对泛型抱有极高的期待。作为一个现代化的编程语言，怎么可以没有泛型呢？转入Objective-C之后，很多时候的设计，都卡在了泛型这块，使得我不得不多写出一些类来完成设计。虽然如今的Objective-C中加入了泛型，但依然没有达到我的预期，而Swift中的泛型，虽然还有些欠缺，却也已经是足够强大了。\n\n什么时候该用泛型呢？我总结如下：**当某种逻辑，可应用于一系列有相似点的对象，为了确保拥有强类型的特性时，则需要使用泛型**。对于这句话的理解，需要进行一些深度分析的，很多时候其实我们并不需要泛型，使用基类即可满足。聚个例子吧，当我们进行一些图形绘制程序的设计时，一个图形元素的绘制可能会抽象出这样的接口：\n\n```swift\nprotocol GraphicElement {\n    func draw(panel: GraphicPanel)\n}\n```\n\n那么在我们的绘图引擎中，绘制元素的方法应该如何定义？使用泛型么？这里其实并不适合使用泛型，因为我们没有必要保留强类型的特性，我们只关心`draw`方法，所以使用基类即可：\n\n```swift\nfunc drawElement(element: GraphicElement) {\n    element.draw(self)\n}\n```\n\n而在某些情况下，我们需要使用强类型的特性，这会使得我们代码更加简洁和安全，这时候，我们就需要使用泛型。比如，在一个通用的消息过滤模块，我们需要对消息内容进行关键字过滤，那么过滤前和过滤后的消息类型应该是一致的，这时候，我们就需要保留强类型的特性，所以，要使用泛型：\n\n```swift\nclass Message {\n    let content: String\n\n    init(content: String) {\n        self.content = content\n    }\n}\n\nclass GroupMessage : Message {\n    private(set) var groupId: Int\n\n    init(id: Int, content: String) {\n        self.groupId = id\n        super.init(content: content)\n    }\n}\n\nfunc filterMessage<T: Message>(message: T) -> T {\n    // ... filter \n    return message\n}\n\nvar message = GroupMessage(id: 12, content: \"hello world\")\nmessage  = filterMessage(message)\n```\n\n请时刻记住泛型的使用场景，避免没必要的泛型设计。在Swift中，目前泛型还是有欠缺的，少了`逆变`和`协变`的支持，而在某些场景下，这是必须的。相信在不久的将来，这个特性会被弥补上来的，毕竟，Objective-C中已经有了这样的支持，虽然不尽人意。\n\n逆变和协变，不仅体现在泛型上，在继承链中的方法覆写上，也有应用。而很多人对这样的概念仍是一知半解，甚至陷入了错误的认知，希望在这里可以帮助大家真正理解它的适用场景。最基本的概念如下：\n\n* **逆变**：父类可以替代子类\n* **协变**：子类可以替代父类\n\n为什么会有这两种概念存在？其实最根本的原因还是为了类型安全，在`C#`的语法设计中，对于数组默认是允许协变的，这样导致存在安全隐患，这也是`C#`为数不多的设计缺陷之一。考虑下面的`C#`代码：\n\n```c#\nclass Super { }\n\nclass Sub : Super {\n\tpublic void test() { }\n}\n\npublic static void Main(string[] args) {\n\tvar subs = new Sub[3];\n\tsubs[0] = new Sub();\n\tsubs[1] = new Sub();\n\t\n\tSuper[] supers = subs;   // 协变\n\tsupers[1] = new Super();\n\t\n\t// 这里会崩溃掉，抛出 ArrayTypeMismatchException\n\tsubs[1].test(); \n}\n```\n\n可以说，这种设计是很糟糕的，因为它没有保证到类型的安全，我们明明声明的是一个`Sub`的数组，里面却可以混入一个不是`Sub`的类型，这便是**协变的陷阱**，相同的问题在Objective-C和Java中同样存在（_Java中会抛出ArrayStoreException异常_）。而在Swift中，如下的代码：\n\n```swift\nclass Super {}\n\nclass Sub : Super {\n    func test() {}\n}\n\nvar subs = [Sub]()\nsubs.append(Sub())\nsubs.append(Sub())\n\nvar supers: [Super] = subs\n\nsupers[1] = Super()\nsubs[1].test()\n```\n\n这样的代码是不会出现任何问题的，因为在Swift中，`Array`是值类型，`supers[1] = Super()`只是对副本的修改，并不会影响到`subs`。这样的协变特性，目前只有系统库能享有，我们自己定义泛型是无法做到的，但，从安全性的角度来说，值类型的泛型应该默认支持协变，这是没有任何副作用的。\n\n协变和逆变的另一个使用场景，便是方法参数和返回值的约束，**参数和返回值应该是可协变的，而闭包中的参数应该是可逆变的**，请好好的理解我说的这句话，加以实践，你会明白这其间的道理。关于泛型，也就说到这里，更多内容还需大家自己去领悟，接下来，我们看看更多有意思的东西！\n\n\n### 元组类型\n\n似乎所有的函数式编程语言里都有元组类型，包括`C#`这种命令式编程语言里也引入了元组，其实元组是很简单的东西，但在Swift中却尤为重要。**元组类型可以看作是一种有序字典**，在编程语言中，所有的`Plain Object`都是可以用字典来表示，只是使用起来不是很便利。而，元组是一种表现力更强，使用起来更方便的`Plain Object`。\n\n什么时候适合使用元组？大体在下面几种情况下：\n\n1. 多返回值的函数里\n2. 用于临时的数据传输对象（_DTO_）\n\n```swift\nfunc mutilReturn() -> (String, String) {\n    return (\"Hello\", \"World\")\n}\n\nfunc tempDTO() {\n    var cellSummary: (id: Int, display: String)\n    cellSummary.id = 1\n    cellSummary.display = \"hello world\"\n\n    print(cellSummary)\n}\n```\n\n元组在面对这种有意义但又很小的简单对象时非常有用，可以帮我们减少很多细小类的编写，**需要注意的是，元组是值对象**，所以它拥有所有值对象的特性。另外，**Swift中，所有的变量定义都是一个一元组**，可以通过下面的代码验证：\n\n```swift\nlet i = 456\nlet i2: Int = 566\n\n// 通过下标访问元组项\nprint(i.0.0.0.0)\nprint(i2.0.0.0.0)\n```\n\n这种设计可以让元组类型和普通的值类型进行平滑过渡，所以`Type`和`(Type)`在Swift中是等同的，考虑下面的代码：\n\n```swift\nclass Item {\n    let value: Int\n    init(_ value: Int) {\n        self.value = value\n    }\n}\n\n// 一元组数组\nvar array: [(Item)] = [(Item(1)), (Item(2)),Item(3), Item(4), Item(5)];\n\nfunc test(i: Item) {\n    print(i.value)\n}\n\ntest(array[0])\n```\n\n上面的代码是没有任何问题的，所以，在Swift中，元组是一等公民，也可以说，只要你使用了Swift，你就已经在使用元组了。\n\n\n### 嵌套类型\n\n嵌套类型也是Swift中靠近现代化语言的重要一步，各种主流高级设计语言中，对嵌套类型的定义都有细微区别。比如，Java中的成员内部类其实就是一个闭包，而静态内部类才是和Swift内部类类似的存在。不过，**嵌套类型的设计，基本都是为了提供更严格的访问控制，和隔离实现**。除此之外，由于Swift中没有名称空间（_Name Space_）和包（_Package_），只有模块（_Module_）的概念，嵌套类型也常用来组织一系列相关的类，用以类更精细化的管理。参考下面这样一段代码：\n\n```swift\nprotocol GraphicElement {\n    func draw()\n}\n\nfinal class GraphicElementFactory {\n\n    class func createElement(text: String) -> GraphicElement {\n        return TextGraphicElement(text: text)\n    }\n\n    private class TextGraphicElement: GraphicElement {\n        private let text: String\n\n        private init(text: String) {\n            self.text = text\n        }\n\n        private func draw() {\n            print(self.text)\n        }\n    }\n}\n\nlet element = GraphicElementFactory.createElement(\"hello world\")\nelement.draw()\n```\n\n上面的示例，我们通过嵌套类来对外屏蔽实现细节，从面向对象的角度来考虑，这提供了良好的封装性，约束了使用者必须通过某种唯一途径来获得接口的实例。考虑下Foundation中的类簇，这种更严格的访问控制使得我们能设计出对客户代码侵入性更小的类库，减少使用者对某些他们并不关心类的困惑。\n\n### 安全的覆写\n\n最后稍微提及一下Swift在`override`上的改进，也就是面向对象中的覆写。这一点在Objective-C中简直是糟透了，因为当你继承一个类时，一不小心你就可能覆写掉了父类的某个私有方法，结果当然是你无法预计的。所以，为了防止这样的情况出现，我们会在私有方法命名前加上一些毫无意义的标识，这对追求优雅的人来说，是极度痛苦的（_有段时间我一直在比较，究竟用几个下划线比较好看_）。好在Swift里对此做出了很好的改进，**如果子类要覆写父类中的方法，那么必须使用`override`关键字，如果子类中出现了与父类签名相同的方法，并且没有标记`override`则编译不会通过**。这很棒！不是么？编译器向我们保证了继承链中不会存在意外覆写的状况，又为我们减少了一个可能会掉入的坑，所以，现在的程序员，真是太幸福了。\n\n```swift\nclass Foo {\n    func foo() {\n        print(\"foo\")\n    }\n}\n\nclass Bar : Foo  {\n    func foo() { // 编译不通过\n\n    }\n}\n```\n\n\n## 重新定义函数\n\n众所周知，Swift是一个支持函数式编程的语言，所以在函数这块与传统的命令式编程有较大的区别。首先，我们要搞清楚，什么是**函数**，什么是**方法**？函数是统称，而方法是主体的行为，也就是定义在类或其它主体中的函数。\n\n### 高阶函数\n\n在函数式编程里，我们不得不说说高阶函数，这是函数式与命令式最大的区别。在函数式编程里，函数是可以做为函数的输入参数和返回值，而**高阶函数便是参数或返回值中有函数的函数**。Swift中的高阶函数定义使用的是闭包表达式，这在闭包的章节里已经有所提及，参看下面这个高阶函数：\n\n```swift\npublic extension Array {\n    public func select<T>(trans: (Element) -> T) -> [T] {\n        var result = [T]()\n        for ele in self {\n            result.append(trans(ele))\n        }\n        return result\n    }\n}\n\nfunc translateInt(i: Int) -> String {\n    return \"\\(i)\"\n}\n\nlet array = [1, 2, 3, 4, 5]\nlet strArray = array.select(translateInt)\n\nprint(strArray)\n```\n\n上面`Array`扩展中的`select`方法便是一个高阶函数，因为它接受一个方法参数，当然，我们也可以用闭包直接代替。高阶函数的使用，可以简化一些算法的实现，并且能有效的减少一些多余的中间变量。也因为有高阶函数的存在，使得函数和普通变量站在了同等的地位，这是函数式编程很大的特点。在其它的函数式编程语言中，还会有一些更加高级的函数式特性，相信在不久的将来，这些特性也都会加入到Swift中，参考下面`F#`的一段代码：\n\n```fsharp\nlet pa f x = (f (x - 1.0), f (x + 1.0))\nlet g1 x y = x ** y\nlet h = pa g1 2.0 // 函数的局部应用\n```\n\n\n### 函数参数\n\n谈到函数，那不得不说说它的参数了，这也是Swift区别与很多其它语言的地方。在古老的Objective-C中，方法的参数命名与其它同等级语言差别是巨大的，虽然褒贬不一，但不得不说，相比于Java或C#，它的可读性是最强的。苹果似乎一直想要保持这种的`代码即文档`的作风，所以在Swift中保留了这样类似的特性，并且对它做了简化，对比一下定义即可：\n\n**Objective-C**：\n\n```objc\n- (BOOL)loginWithUsername:(NSString *)username password:(NSString *)password;\n```\n\n**Swift**：\n\n```swift\nfunc loginWithUsername(username: String, password: String) -> Bool\n```\n\n算一算，一共帮你省略了多少字符，这对保护你珍贵Mac键盘还是很有好处的！另外与参数话题相关的，就是**参数默认值**了，因为Swift参数是携有命名的特性，所以参数的默认值并不像其它语言中那样必须放置在最后的几个参数，这又让Swift能对自己拥有命名参数而引以为豪了：\n\n```swift\n// 放置在第一位的默认值\nfunc loginWithUsername(username: String = \"admin\", password: String) -> Bool {\n    return true\n}\n```\n\n然后要说的便是**可变参数列表**了，在Objective-C中也有可变参数列表，比如`NSLog`中后续的参数，但是，在不进行任何文档查阅和网络搜索的情况下，你能默写出来么？我觉得大多数人都写不出来，而在Swift中，这种情况得以改变，可变参数列表直接与数组使用类似：\n\n```swift\nfunc Log(format: String, args: String ...) {\n    for arg in args {\n        print(arg)\n    }\n}\n```\n\n上面代码片段中的`args`，其实就是一个类似与数组的参数，这比起Objective-C中的使用要简单的很多，也与其它编程语言中类似。\n\n\n### 自定义操作符\n\n自定义操作符是一个非常酷的特性，它可以帮我们**将一些嵌套调用的代码变得更加清晰**，在Swift中，操作符其实就是一个特定的函数，这也是与众多函数式编程语言保持一致的地方。假设我们要做一个图片滤镜的程序，也就是说，可以对图片应用各种滤镜效果，那么应该有以下这样类似的代码：\n\n```swift\nclass Image {\n    var filterNames = [String]()\n}\n\nprotocol ImageFilter {\n    func apply(image: Image) -> Image\n}\n\nclass GrayFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"gray\")\n        return image\n    }\n}\n\nclass BlurFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"blur\")\n        return image\n    }\n}\n\nclass ContrastFilter : ImageFilter {\n    func apply(image: Image) -> Image {\n        image.filterNames.append(\"contrast\")\n        return image\n    }\n}\n```\n\n当我们要对图片应用滤镜时，则可能会写出类似下面这样的嵌套调用：\n\n```swift\nlet image = Image()\n\nlet gray = GrayFilter()\nlet blur = BlurFilter()\nlet contrast = ContrastFilter()\n\ncontrast.apply(blur.apply(gray.apply(image)))\n```\n\n这时候，我们可以用自定义操作符来解开这样的嵌套，类似下面代码：\n\n```swift\ninfix operator |> { associativity left precedence 140 }\n\nfunc |> (left: Image, right: ImageFilter) -> Image {\n    return right.apply(left)\n}\n\nlet outputImage = image |> gray |> blur |> contrast\nprint(outputImage.filterNames)\n\n```\n\n通过自定义`|>`这样一个操作符，我们使用者的代码表述性变得更强，也将相关性的处理放置在了同一条语句里。这种感觉是不是非常棒？似乎已经看到你们在YY一些奇怪的操作符了。关于自定义操作符的语法，这里简单的说明下：\n\n```swift\ninfix operator |> { associativity left precedence 140 }\n\ninfix\t\t\t: 代表操作符类型，可以为 prefix(前置) infix(中置) postfix(后置)\noperator\t\t: 固定关键字\n|>\t\t\t\t: 要定义的操作符\nassociativity\t: 可以为 left right none，表示当两个同等优先级的中置操作符出现时，优先使用哪个。如果为 none 则不能将操作符连接。\nprecedence\t: 操作符的优先级，值越大，优先级越高，+ 的优先级为 140\n```\n\n介绍完操作符，函数这块的内容应该也可以告一段落了，接下来介绍下属性相关的特性！\n\n\n## 强大的属性\n\n属性在面向对象的设计中，也是非常重要的一个概念，属性是对对象某种状态值的抽象，比如颜色、大小、重量等。在Objective-C中，属性又称之为自动合成属性，因为是编译器将**设置**和**获取**方法，按照属性的关键字进行自动合成的。这种方式在其它语言里也很常见，比如C#的属性也是类似，可以通过反射获取到单独的设置和获取方法。Swift中的属性也是传承了Objective-C属性的一些特性，并做了一些调整，比如去除了原子性描述，由于目前并没有太多关于Swift运行时的文档，也没有做一些关于这方面的Hack，所以原理性的东西这边就不提及了。\n\n\n### 延时属性\n\n在Objective-C中，我们可以手动的实现一个延时属性，也就是只有当属性第一次被调用时，才真正的去构建属性的实例。这种特性在Swift中，已经在语法层级得到了支持，这样对**处理一些占用内存较大，但又不是很常用的属性**时，能有效的降低内存使用率。下面是在Objective-C中实现延时属性的代码：\n\n```objc\n@interface DataManager : NSObject\n\n@property (nonatomic, strong, readonly) NSData *data;\n\n@end\n\n@implementation DataManager\n\n@synthesize data = _data;\n\n- (NSData *)data {\n    if (_data == nil) {\n        _data = [NSData dataWithContentsOfFile:@\"a/big/file\"];\n    }\n    return _data;\n}\n\n@end\n```\n\n上面的写法虽然代码量不大，但毕竟会增加工作量，另外这种写法在多线程环境中并不严谨，如果再加上线程互斥的代码，整个延时属性的实现就会有更多的代码量和复杂度。所以，在Swift中，多线程并发的这种需求完全由编译器来保证，那么，我们实现这个延时属性，使用下面的代码即可：\n\n```swift\nclass DataManager {\n    lazy private(set) var data: NSData = NSData(contentsOfFile: \"a/big/file\")!\n}\n```\n\nBingo！！这样的特性太棒了，为我们省略了不少工作量啊！\n\n\n### 属性监听\n\n属性监听也是Swift中从语法层级支持的特性，当然，没有语法层级的支持，我们也可以手动撸出同样效果的代码，但总归是麻烦了点。首先我们要区别`KVO`和属性监听的区别，`KVO`是对其它对象属性的变化进行监听，而属性监听是对自身属性的变化进行监听。在语法层支持属性监听，使得我们可以将属性的存储逻辑和监听逻辑分离，这会使得我们代码结构更加清晰。\n\n```swift\nclass StepCounter {\n\n    var step: Int = 0 {\n        willSet(newValue) {\n            print(\"new value \\(newValue)\")\n        }\n\n        didSet {\n            print(\"old value \\(oldValue)\")\n        }\n    }\n}\n\nvar stepCounter = StepCounter()\nstepCounter.step = 200\nstepCounter.step = 201\n\n// new value 200\n// old value 0\n// new value 201\n// old value 200\n```\n\n在属性监听代码块里，我们可以获取到新设定的值和原始的值，而且这个块中的操作是线程安全的。所以，我们是可以在这个块里，**做一些与属性值相关的策略逻辑**，比如只在特定某些值下触发的逻辑。\n\n\n### 下标\n\n下标在Objective-C中是使用非正式协议的方式实现的，但对下标类型有所限制，而在Swift中对下标类型和数量是没有什么限制的，并且下标是支持**重载**的。这又给了我们创造的空间，比如用字符串或索引来取自定义配置文件中的值：\n\n```swift\nclass ConfigurationFile {\n\n    subscript(key: String) -> String {\n        get {\n            return \"hello\"\n        }\n    }\n\n    subscript(index: Int) -> String {\n        get {\n            return \"world\"\n        }\n    }\n}\n\nlet config = ConfigurationFile()\n\nprint(config[\"a key\"] + \" \" + config[1])\n```\n\n下标主要是适用场景是**需要一种能通过索引快速取值**设计，它和属性非常相似，所以将其归类到了属性这一块。\n\n\n## 运行时的安全\n\n前面谈过了类型安全，这里再简单谈谈Swift在运行时是如何处理异常的。与很多传统的编程语言一样，Swift引入了`try - catch`机制，在Objective-C中也有`try`和`catch`，但与其它语言中的不同，Objective-C的异常处理在内存管理上存在泄露的风险。所以我们一直都在用`NSError`这样的错误处理模型，苹果提供的类库中也都采取了这样的处理方式，而在Swift中，这点得以改进，Swift中的`throws`函数必须用`try`去调用，所以很容易在ARC环境下生成`retain`和`release`代码，所以再也不用当心内存泄露的问题了。\n\n在Swift中，所有可以抛出的异常，必须实现`ErrorType`协议，当然`NSError`实现了这样的协议。而如果我们要自定义异常，则必须使用枚举类型，原因很简单，因为枚举配合它的关联值特别适合做这样的事情：\n\n```swift\nenum LoginError: ErrorType {\n    case InvalidUsername, InvalidPassword\n    case Other(String)\n}\n\nfunc login(username: String, password: String) throws -> Int {\n    if username != \"makee\" {\n        throw LoginError.InvalidUsername\n    } else if password != \"sun\" {\n        throw LoginError.InvalidPassword\n    } else {\n        throw LoginError.Other(\"unknow error\")\n    }\n}\n\ndo {\n    try login(\"makee\", password: \"sun\")\n} catch LoginError.InvalidUsername {\n    // ...\n} catch LoginError.InvalidPassword {\n    // ...\n} catch LoginError.Other(let msg) {\n    print(msg)\n}\n```\n\n当然，如果确定没有任何异常，我们只要使用`try!`去调用即可，这样可以省略掉`do - cacth`这样的代码结构。\n\n```swift\ntry! login(\"username\", password: \"password\")\n```\n\n这时候需要注意，就和可选类型的强制解包一样，如果失败了是会导致Crash的。Swift引入了这样的异常处理机制，虽然在语法的角度上与其它语言大相径庭，但如果从ARC的角度去考虑，就会觉得，这不失为一种很好的妥协。比较Swift没有垃圾回收机制，所有的内存管理都是靠程序本身去处理，有了这样的异常处理机制，我们应该更少的使用`nil`，这样我们的程序会更加健壮。\n\n与Java的异常处理类似，Swift中的异常处理也存在**冒泡机制**，也就是异常向上传递，这种特性使得我们的异常是可传递的，但为了内存管理考虑，还是必须要使用上`try`关键字。比如下面的代码：\n\n```swift\nfunc test() throws {\n   try login(\"usr\", password: \"pwd\")\n}\n```\n\n这时候，调用`test`函数时，异常是从`login`冒上来的，这就是异常传递机制。通过这样的设定，我们不会忽略掉任何异常，配合**模式匹配**中所讲述的内容，我们的`catch`块可控性也是非常灵活的。唯一不足的是，并不能像Java那样知道到底会抛出何种异常，这点和`C#`中倒是有点类似，也只能靠文档来弥补了。\n\n\n## 最后再说一点\n\n作为单篇文章，本次所讲述的内容可能有点过多，因为我觉得Swift真的有太多比Objective-C强大的地方，也非常愿意作为Swift的传道士。碍于篇幅，这篇文章中还有很多Swift的小特性没有提及，比如表达式的`where`子句，枚举类型的`rawValue`等，这些就留给在座各位自己去摸索了。\n\n本篇文章中，我想要达到的目的并不仅仅是让在座各位了解到Swift的特性，更希望能让大家明白在什么场景下去使用这样的特性。所以文章中花了很大的篇幅描述使用场景和我认为的设计初衷，语法细节都是很简单的略过了，因为语法是很容易从官方文档中找到说明的，而使用场景和相应的一些思想是很难从文档上找到的。\n\n那么，本篇就到这里了，希望大家能够有所收获，**一同学习，成就更好的自己**！","slug":"take-you-to-learn-swift-feng-sao","published":1,"updated":"2016-02-26T06:30:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cil3csxb50000zvcfluhzttiz"}],"PostAsset":[],"PostCategory":[{"post_id":"cil3csxb50000zvcfluhzttiz","category_id":"cil3csxbb0001zvcf41kxcu24","_id":"cil3csxbe0004zvcfvmlb5dfb"}],"PostTag":[{"post_id":"cil3csxb50000zvcfluhzttiz","tag_id":"cil3csxbc0002zvcf45newf6z","_id":"cil3csxbe0003zvcfxck09gtz"}],"Tag":[{"name":"Swift","_id":"cil3csxbc0002zvcf45newf6z"}]}}